package GramaticaFlexYCup;
import java_cup.runtime.*;

//clases de java :D
import java.util.ArrayList;
//clases mias de mi :D

import FuncionesDelLenguaje.Parar;
import FuncionesDelLenguaje.Continuar;
import FuncionesDelLenguaje.Retorno;

import FuncionesDelLenguaje.Switch;
import FuncionesDelLenguaje.For;
import FuncionesDelLenguaje.While;
import FuncionesDelLenguaje.Do_while;

import FuncionesDelLenguaje.If;

import objetos.e_e;
import objetos.Llamada_metodo;
import objetos.Instrucciones_cuerpo;
import objetos.Asignacion_funcion;

import ClasesAuxiliares.contenedorEnum.Tipos;

import ClasesAuxiliares.contenedorEnum.Tipos;

import ClasesAuxiliares.Nodo;
import FuncionesDelLenguaje.Print;

import Comparadores.Ternario;

import objetos.Iden;
import objetos.Asignacion;


import objetos.Acceso;
import objetos.AccesoMatriz;
import objetos.Var_acceso;

import objetos.Case;
import objetos.Default;
import objetos.Primitivo;

import objetos.OperadorBinario;
import objetos.OperadorBinario.Operando;

import objetos.OperadorUnario;
import objetos.OperadorUnario.Op;



parser code 
{:
  public ArrayList miarr = new ArrayList<Nodo>();

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    }  
:}

/* Terminals (tokens returned by the scanner). */
terminal String entero, numerico, igual, mas, menos, por, division, pComa, coma, dosPuntos;
terminal String parenI, parenD, cadena, iden, modular, potencia, True, False, not, Break, Do; 
terminal String igualigual, noigual, menorigual, mayorigual, menorque,mayorque, or , and, preg; 
terminal String cori , cord , If, llavei, llaved, Else, Function, Return, While, Continue; 
terminal String For , In, Null, Default, Switch, Case, flecha; 

/* Non terminals */
non terminal INICIO;

non terminal Nodo  PRIMITIVO, EXPRESION, ARITMETICA, ASIGNACION, ELSE_IF, FUN_IF, DECFUNC, TRANSFERENCIA, FOR, SWITCH, CASES;
non terminal Nodo  INSTRUCCION, LLAMADAFUNC, SALIDA , IDEN_ACCESO, IDEN_ACCESO2, PARAMS_DEC_FUN, WHILE, DO_WHILE;
//non terminal Nodo  INSTRUCCION, LLAMADAFUNC, SALIDA , IDEN_ACCESO, IDEN_ACCESO2, PARAMS_DEC_FUN, WHILE, DO_WHILE, PARAMETRO;
non terminal ArrayList<Nodo>  INSTRUCCIONES, LISTACORCHETES, LISTA_PARAMS_FUN , LISTA_PARAMS_FUN2;
//non terminal ArrayList<Nodo> LISTAPARAMS, LISTAPARAMS2, INSTRUCCIONES, LISTACORCHETES, LISTA_PARAMS_FUN , LISTA_PARAMS_FUN2;


//non terminal Object ; 



precedence right igual;
precedence right preg , dosPuntos;
precedence left or;
precedence left and;
precedence left igualigual, noigual;
precedence left mayorque, mayorigual, menorque , menorigual;
precedence left mas, menos;
precedence left por, division, modular;
precedence left potencia;
precedence left parenI, parenD;
precedence right not; 
precedence right menos; 


start with INICIO;

INICIO ::= INSTRUCCIONES:e {: miarr = e;  :}
         ;

INSTRUCCIONES ::= INSTRUCCIONES:arr INSTRUCCION:a    {: if(a == null){ RESULT = arr;  } else{  arr.add(a); RESULT = arr;} :}
                |                     {: RESULT = new ArrayList<Nodo>(); :}
                ;

INSTRUCCION ::= LLAMADAFUNC:a        SALIDA{: RESULT = a; :}
                | ASIGNACION:a       SALIDA{: RESULT = a; :}
                | FUN_IF:a                 {: RESULT = a; :}
                | DECFUNC:a                {: RESULT = a; :}
                | WHILE:a                  {: RESULT = a; :}
                | FOR:a                    {: RESULT = a; :}
                | DO_WHILE:a         SALIDA{: RESULT = a; :}
                | TRANSFERENCIA:a    SALIDA{: RESULT = a; :}
                | SWITCH:a                 {: RESULT = a; :}
                | CASES:a                  {: RESULT = a; :} 
                | error:e            pComa {: RESULT = null; :}
                | error:e            llaved{: RESULT = null; :}
              ;

CASES ::= Case:a EXPRESION:n dosPuntos              {: RESULT = new Case(aleft , aright , n); :}
        | Default:a dosPuntos                       {: RESULT = new Default(aleft , aright);  :}
        ; 

SWITCH ::= Switch:a parenI EXPRESION:n1 parenD llavei INSTRUCCIONES:arr  llaved {: Nodo n2 = new Instrucciones_cuerpo(0,0,arr);
                                                                RESULT = new Switch(aleft , aright ,n1 , n2); :} ; 

FOR ::= For parenI iden:a In EXPRESION:n1 parenD llavei  INSTRUCCIONES:arr llaved {: Nodo n2 = new Instrucciones_cuerpo(0,0,arr); 
                                                        RESULT = new For(aleft , aright , n1 , n2 , a);        :} 
        ;

DO_WHILE ::= Do:a llavei  INSTRUCCIONES:arr llaved While parenI EXPRESION:n1 parenD {: Nodo n = new Instrucciones_cuerpo(0,0,arr); 
                                                                        RESULT = new Do_while(aleft , aright , n , n1);:}
        ;

WHILE ::= While:a parenI EXPRESION:n parenD llavei INSTRUCCIONES:arr llaved {: Nodo n1 = new Instrucciones_cuerpo(0,0,arr); 
                                                                        RESULT = new While(aleft , aright , n , n1); :}
        ;

DECFUNC ::= iden:a igual Function parenI LISTA_PARAMS_FUN:arr  parenD llavei INSTRUCCIONES:arr2  llaved 
                        {: 
                        Nodo n = new Instrucciones_cuerpo(0,0 , arr2);
                        arr.add(n);
                        RESULT = new Asignacion_funcion(aleft , aright , arr , a); :}
                | iden:a igual parenI LISTA_PARAMS_FUN:arr  parenD flecha  llavei INSTRUCCIONES:arr2  llaved
                {:
                        Nodo n = new Instrucciones_cuerpo(0,0 , arr2);
                        arr.add(n);
                        RESULT = new Asignacion_funcion(aleft , aright , arr , a);
                :} 
                | iden:a igual parenI iden:n parenD flecha llavei INSTRUCCIONES:arr2 llaved 
                {:
                        Nodo n1 = new Instrucciones_cuerpo(0,0,arr2);
                        ArrayList<Nodo> arr = new ArrayList<Nodo>(); 
                        arr.add(new Iden(nleft , nright , n)); arr.add(n1);
                        RESULT = new Asignacion_funcion(aleft , aright , arr , a); 
                :}   
                ;

TRANSFERENCIA ::= Return:a                         {: RESULT = new Retorno(aleft, aright , null); :}
        | Return:a parenI EXPRESION:n parenD {: RESULT = new Retorno(aleft, aright , n);    :}
        | Break:a        {:RESULT = new Parar( aleft, aright ); :}
        | Continue:a    {:RESULT = new Continuar( aleft, aright ); :}
        ;

LISTA_PARAMS_FUN  ::=  LISTA_PARAMS_FUN2:arr {:RESULT = arr; :} 
                        | {: RESULT = new ArrayList<Nodo>(); :}
                        ; 

LISTA_PARAMS_FUN2 ::=  LISTA_PARAMS_FUN2:arr coma PARAMS_DEC_FUN:n {: arr.add(n); RESULT = arr; :}
                        | PARAMS_DEC_FUN:n {: ArrayList<Nodo> arr = new ArrayList<Nodo>(); arr.add(n); RESULT = arr; :}
                        ; 
                
PARAMS_DEC_FUN    ::= EXPRESION:n                   {: RESULT =  n; :}
                |     EXPRESION:n igual:a EXPRESION:n1 {: RESULT =  new e_e(aleft , aright , n, n1); :}
                |     Default:a     {:RESULT = new Default(aleft, aright); :}
                ;
        
FUN_IF ::= If:a parenI EXPRESION:n parenD llavei  INSTRUCCIONES:arr  llaved ELSE_IF:n2 {:  Nodo n1 = new Instrucciones_cuerpo(0 , 0 , arr); 
                                                                                        /* if operador expresiones_cuerpo*/ 
                                                                                        ArrayList<Nodo> arr2 = new ArrayList<Nodo>();
                                                                                        arr2.add(n); arr2.add(n1);
                                                                                        if(n2 != null){ arr2.add(n2); }
                                                                                        RESULT = new If(aleft , aright ,arr2 );
                                                                                        :}
                ;

ELSE_IF ::= Else llavei INSTRUCCIONES:arr llaved{: RESULT = new Instrucciones_cuerpo(0 , 0 , arr);  :} 
        | Else FUN_IF:a  {: RESULT = a; :}
         | {: RESULT = null;:} ; 


ASIGNACION ::= 
        iden:i igual:a EXPRESION:n2        {: Nodo n  =  new Iden(ileft , iright , i);
                                              RESULT  =  new Asignacion(aleft, aright , n , n2); :}
        |
        IDEN_ACCESO:n igual:a EXPRESION:n2 {: RESULT  =  new Asignacion(aleft, aright , n , n2); :}
        ;


IDEN_ACCESO ::= IDEN_ACCESO2:n        {: RESULT = n;  :}  
                | LISTACORCHETES:arr  {: RESULT = new Var_acceso(arr.get(0).fila, arr.get(0).columna , arr);  :}
        ;

IDEN_ACCESO2 ::= iden:a  cori:t EXPRESION:n1 coma EXPRESION:n2 cord {: Nodo n = new AccesoMatriz(tleft , tright , n1 , n2 );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); :}
                |iden:a  cori:t EXPRESION:n1  coma cord        {: Nodo n = new AccesoMatriz(tleft , tright , n1 , true );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); :}
                |iden:a  cori:t coma EXPRESION:n1  cord        {: Nodo n = new AccesoMatriz(tleft , tright , n1 , false );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); :}
                ; 
        
LISTACORCHETES ::= LISTACORCHETES:arr cori:a EXPRESION:n cord {: arr.add(new Acceso(aleft , aright , n , false )); RESULT = arr; :}
                | LISTACORCHETES:arr cori:a cori EXPRESION:n cord cord {: arr.add(new Acceso(aleft , aright , n , true )); RESULT = arr; :}
                | iden:a  cori EXPRESION:n2 cord  {:ArrayList<Nodo> arr = new ArrayList<Nodo>(); 
                        Nodo n =  new Iden(aleft , aright , a);  
                        arr.add(n);arr.add(new Acceso(aleft , aright , n2 , false ));   RESULT  = arr;  :}
                | iden:a  cori cori EXPRESION:n2 cord cord  {:ArrayList<Nodo> arr = new ArrayList<Nodo>(); 
                        Nodo n =  new Iden(aleft , aright , a);  
                        arr.add(n);arr.add(new Acceso(aleft , aright , n2 , true ));   RESULT  = arr;  :}       
                        
                        ; 

LLAMADAFUNC ::= iden:a parenI LISTA_PARAMS_FUN:arr parenD  {: RESULT = new Llamada_metodo(aleft, aright , arr, a);    :}
           ;
/*
LISTAPARAMS ::= LISTAPARAMS2:a {: RESULT = a;  :}  
                | {: RESULT  = new ArrayList<>();  :}
                 ; 

LISTAPARAMS2 ::= LISTAPARAMS2:arr coma PARAMETRO:a {: arr.add(a);  RESULT  = arr; :}
                | PARAMETRO:a   {: ArrayList<Nodo> arr = new ArrayList<>();  arr.add(a); RESULT = arr;   :};


PARAMETRO ::= Default:a     {:RESULT = new Default(aleft, aright); :}
        |    EXPRESION:a  {:RESULT  = a; :}
        ;
        */

EXPRESION ::=  ARITMETICA:e                 {: RESULT = e; :}  
           |   PRIMITIVO:e                  {: RESULT = e; :}
           |   LLAMADAFUNC:e                {: RESULT = e; :}
           |   EXPRESION:n preg:a EXPRESION:n1 dosPuntos EXPRESION:n2 
                {: ArrayList<Nodo> arr = new ArrayList<Nodo>();
                arr.add(n); arr.add(n1); arr.add(n2); 
                RESULT = new Ternario(aleft , aright , arr);   
                :} 
           ;

ARITMETICA ::= menos:a  EXPRESION:n                    {:  RESULT = new OperadorUnario(aleft  , aright, n, Op.neg);                     :} %prec menos 
                | not:a  EXPRESION:n                   {:  RESULT = new OperadorUnario(aleft  , aright, n, Op.not);                     :} 
                | EXPRESION:n mas:a EXPRESION:n2       {:  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mas);          :}
                | EXPRESION:n menos:a EXPRESION:n2     {:  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menos);        :}
                | EXPRESION:n por:a EXPRESION:n2       {:  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.por);          :}
                | EXPRESION:n division:a EXPRESION:n2  {:  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.div);          :}
                | EXPRESION:n potencia:a EXPRESION:n2  {:  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.potencia);     :}
                | EXPRESION:n modular:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.modulo);         :}


                | EXPRESION:n igualigual:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.comparacion);         :}
                | EXPRESION:n noigual:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.desigualdad);         :}
                | EXPRESION:n mayorque:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mayorque);         :}
                | EXPRESION:n mayorigual:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mayorigual);         :}
                | EXPRESION:n menorque:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menorque);         :}
                | EXPRESION:n menorigual:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menorigual);         :}
               
                | EXPRESION:n or:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.or);         :}
                | EXPRESION:n and:a EXPRESION:n2  {: RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.and);         :}
             ;

PRIMITIVO ::= numerico:e  {: RESULT = new  Primitivo(eleft , eright , Tipos.numerico,  Double.parseDouble(e) ); :}
            | cadena:e  {:   RESULT = new  Primitivo(eleft , eright , Tipos.cadena,  e ); :}
            | entero:e  {:   RESULT = new  Primitivo(eleft , eright , Tipos.entero,  e ); :}
            | True:e  {:   RESULT = new  Primitivo(eleft , eright , Tipos.booleano,  true ); :}
            | False:e  {:   RESULT = new  Primitivo(eleft , eright , Tipos.booleano,  false ); :}
            | IDEN_ACCESO:n   {:  RESULT = n; :}
            |iden:a               {: RESULT =  new Iden(aleft , aright , a); :}
            | Null:e {: RESULT = new  Primitivo(eleft , eright , Tipos.nulo,  "" ); :}
             |   parenI EXPRESION:e parenD    {: RESULT = e; :}
           ;

SALIDA ::= pComa | ; 