package GramaticaFlexYCup;
import java_cup.runtime.*;

//clases de java :D
import java.util.ArrayList;
//clases mias de mi :D
import ClasesAuxiliares.Nodo;
import ClasesAuxiliares.contenedorEnum.Tipos;
import objetos.Primitivo;
import objetos.Llamada_metodo;


parser code 
{:
  public ArrayList miarr = new ArrayList<Nodo>();

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    }  
:}

/* Terminals (tokens returned by the scanner). */
terminal String entero, numerico, igual, mas, menos, por, division, pComa, coma, dosPuntos;
terminal String parenI, parenD, cadena, iden, modular, potencia; 

/* Non terminals */
non terminal INICIO;

non terminal Nodo  PRIMITIVO, EXPRESION, ARITMETICA;
non terminal Nodo INSTRUCCIONES, INSTRUCCION, LLAMADAFUNC, SALIDA;
non terminal ArrayList<Nodo> LISTAPARAMS, LISTAPARAMS2;

precedence left mas, menos;
precedence left por, division, modular;
precedence left potencia;
precedence left parenI, parenD;

start with INICIO;

INICIO ::= INSTRUCCIONES:e {:  :}
         ;

INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION:a    {: miarr.add(a); :}
                |  INSTRUCCION:a                   {: miarr.add(a); :}
                ;

INSTRUCCION ::= LLAMADAFUNC:a{: RESULT = a; :}
              ;

LLAMADAFUNC ::= iden:a parenI LISTAPARAMS:arr parenD SALIDA {: RESULT = new Llamada_metodo(aleft, aright , arr, a);    :}
           ;

LISTAPARAMS ::= LISTAPARAMS2:a {: RESULT = a;  :}  
                | {: RESULT  = new ArrayList<>();  :}
                 ; 

LISTAPARAMS2 ::= LISTAPARAMS2:arr coma EXPRESION:a {: arr.add(a);  RESULT  = arr; :}
                | EXPRESION:a   {: ArrayList<Nodo> arr = new ArrayList<>();  arr.add(a); RESULT = arr;   :};


EXPRESION ::=  ARITMETICA:e                 {:  :}  
           |   PRIMITIVO:e                  {: RESULT = e; :}
           |   parenI EXPRESION:e parenD    {:  :}

           ;

ARITMETICA ::= menos  EXPRESION:e                 {:  :} %prec menos 
             | EXPRESION:a mas EXPRESION:b       {:  :}
             | EXPRESION:a menos EXPRESION:b     {:  :}
             | EXPRESION:a por EXPRESION:b       {:  :}
             | EXPRESION:a division EXPRESION:b  {:  :}
             | EXPRESION:a potencia EXPRESION:b  {:  :}
             | EXPRESION:a modular EXPRESION:b  {:  :}
             ;

PRIMITIVO ::= numerico:e  {: RESULT = new  Primitivo(eleft , eright , Tipos.numerico,  Double.parseDouble(e) ); :}
            | cadena:e  {:   RESULT = new  Primitivo(eleft , eright , Tipos.cadena,  e ); :}
           ;

SALIDA ::= pComa | ; 