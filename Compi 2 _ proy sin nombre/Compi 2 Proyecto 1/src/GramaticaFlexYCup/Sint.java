
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package GramaticaFlexYCup;

import java_cup.runtime.*;
import java.util.ArrayList;
import FuncionesDelLenguaje.Parar;
import FuncionesDelLenguaje.Continuar;
import FuncionesDelLenguaje.Retorno;
import FuncionesDelLenguaje.Switch;
import FuncionesDelLenguaje.For;
import FuncionesDelLenguaje.While;
import FuncionesDelLenguaje.Do_while;
import FuncionesDelLenguaje.If;
import objetos.e_e;
import objetos.Llamada_metodo;
import objetos.Instrucciones_cuerpo;
import objetos.Asignacion_funcion;
import ClasesAuxiliares.contenedorEnum.Tipos;
import ClasesAuxiliares.contenedorEnum.Tipos;
import ClasesAuxiliares.Nodo;
import FuncionesDelLenguaje.Print;
import Comparadores.Ternario;
import objetos.Iden;
import objetos.Asignacion;
import objetos.Acceso;
import objetos.AccesoMatriz;
import objetos.Var_acceso;
import objetos.Case;
import objetos.Default;
import objetos.Primitivo;
import objetos.OperadorBinario;
import objetos.OperadorBinario.Operando;
import objetos.OperadorUnario;
import objetos.OperadorUnario.Op;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sint extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sint() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sint(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sint(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\026" +
    "\004\000\002\026\002\000\002\016\004\000\002\016\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\004\000\002\016\004\000\002" +
    "\016\003\000\002\016\003\000\002\015\005\000\002\015" +
    "\004\000\002\014\011\000\002\013\013\000\002\025\012" +
    "\000\002\024\011\000\002\011\013\000\002\011\013\000" +
    "\002\011\013\000\002\012\003\000\002\012\006\000\002" +
    "\012\003\000\002\012\003\000\002\030\003\000\002\030" +
    "\002\000\002\031\005\000\002\031\003\000\002\023\003" +
    "\000\002\023\005\000\002\023\003\000\002\010\012\000" +
    "\002\007\006\000\002\007\004\000\002\007\002\000\002" +
    "\006\005\000\002\006\005\000\002\021\003\000\002\021" +
    "\003\000\002\022\010\000\002\022\007\000\002\022\007" +
    "\000\002\027\006\000\002\027\010\000\002\027\006\000" +
    "\002\027\010\000\002\017\006\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\004\003\000\002\004" +
    "\007\000\002\005\004\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\020\003\000\002\020" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\032\002\ufffe\021\ufffe\027\ufffe\030\ufffe\044" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe" +
    "\061\ufffe\001\002\000\032\002\000\021\037\027\015\030" +
    "\030\044\025\051\026\052\033\053\007\054\011\057\017" +
    "\060\027\061\023\001\002\000\004\002\006\001\002\000" +
    "\004\002\001\001\002\000\036\002\uffe7\013\uffe7\021\uffe7" +
    "\027\uffe7\030\uffe7\044\uffe7\046\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\057\uffe7\060\uffe7\061\uffe7\001\002\000\034" +
    "\002\uffff\021\uffff\027\uffff\030\uffff\044\uffff\046\uffff\051" +
    "\uffff\052\uffff\053\uffff\054\uffff\057\uffff\060\uffff\061\uffff" +
    "\001\002\000\004\016\265\001\002\000\034\002\ufff9\021" +
    "\ufff9\027\ufff9\030\ufff9\044\ufff9\046\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\057\ufff9\060\ufff9\061\ufff9\001\002\000" +
    "\110\002\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\256\043" +
    "\uffd8\044\uffd8\046\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\001\002\000\036\002\uffb1\013" +
    "\203\021\uffb1\027\uffb1\030\uffb1\044\uffb1\046\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\057\uffb1\060\uffb1\061\uffb1\001" +
    "\002\000\036\002\uffe8\013\uffe8\021\uffe8\027\uffe8\030\uffe8" +
    "\044\uffe8\046\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\001\002\000\034\002\ufff5\021\ufff5" +
    "\027\ufff5\030\ufff5\044\ufff5\046\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\057\ufff5\060\ufff5\061\ufff5\001\002\000\004" +
    "\015\254\001\002\000\004\006\252\001\002\000\036\002" +
    "\uffb1\013\203\021\uffb1\027\uffb1\030\uffb1\044\uffb1\046\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\001\002\000\036\002\uffb1\013\203\021\uffb1\027\uffb1" +
    "\030\uffb1\044\uffb1\046\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002\000\026\004\061" +
    "\005\054\010\056\016\052\020\044\021\063\024\050\025" +
    "\053\026\045\056\060\001\002\000\034\002\ufff4\021\ufff4" +
    "\027\ufff4\030\ufff4\044\ufff4\046\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\057\ufff4\060\ufff4\061\ufff4\001\002\000\004" +
    "\016\232\001\002\000\040\002\uffea\013\uffea\016\227\021" +
    "\uffea\027\uffea\030\uffea\044\uffea\046\uffea\051\uffea\052\uffea" +
    "\053\uffea\054\uffea\057\uffea\060\uffea\061\uffea\001\002\000" +
    "\004\016\221\001\002\000\004\045\212\001\002\000\034" +
    "\002\ufffa\021\ufffa\027\ufffa\030\ufffa\044\ufffa\046\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\001\002\000\034\002\ufff8\021\ufff8\027\ufff8\030\ufff8\044" +
    "\ufff8\046\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\001\002\000\004\016\204\001\002\000" +
    "\034\002\ufffb\021\ufffb\027\ufffb\030\ufffb\044\ufffb\046\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\001\002\000\036\002\uffb1\013\203\021\uffb1\027\uffb1" +
    "\030\uffb1\044\uffb1\046\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002\000\106\002\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\046\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\001\002\000\010\006\041\016\040\042\042\001\002" +
    "\000\032\004\061\005\054\010\056\016\052\017\uffe5\020" +
    "\044\021\063\024\050\025\053\026\045\056\060\057\145" +
    "\001\002\000\030\004\061\005\054\010\056\016\143\020" +
    "\044\021\063\024\050\025\053\026\045\050\142\056\060" +
    "\001\002\000\032\004\061\005\054\010\056\014\046\016" +
    "\052\020\044\021\063\024\050\025\053\026\045\042\057" +
    "\056\060\001\002\000\106\002\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\017\uffce" +
    "\021\uffce\022\uffce\023\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\043\uffce\044\uffce\046\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\057\uffce\060\uffce\061\uffce\001\002\000\106" +
    "\002\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9\044\uffb9" +
    "\046\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\001\002\000\026\004\061\005\054\010\056" +
    "\016\052\020\044\021\063\024\050\025\053\026\045\056" +
    "\060\001\002\000\026\004\061\005\054\010\056\016\052" +
    "\020\044\021\063\024\050\025\053\026\045\056\060\001" +
    "\002\000\106\002\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043" +
    "\uffcf\044\uffcf\046\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\001\002\000\106\002\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\043\uffb7\044\uffb7\046\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\001\002\000\106\002\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\043\uffcc\044\uffcc\046\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\001\002\000\026\004\061" +
    "\005\054\010\056\016\052\020\044\021\063\024\050\025" +
    "\053\026\045\056\060\001\002\000\106\002\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\046\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\057\uffb6\060\uffb6\061\uffb6\001" +
    "\002\000\106\002\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\017\uffba\021\uffba\022" +
    "\uffba\023\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\043" +
    "\uffba\044\uffba\046\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\057\uffba\060\uffba\061\uffba\001\002\000\106\002\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\046\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\001\002\000\026\004\061\005\054\010\056\016\052\020" +
    "\044\021\063\024\050\025\053\026\045\056\060\001\002" +
    "\000\026\004\061\005\054\010\056\016\052\020\044\021" +
    "\063\024\050\025\053\026\045\056\060\001\002\000\106" +
    "\002\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3" +
    "\046\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\057\uffb3\060" +
    "\uffb3\061\uffb3\001\002\000\106\002\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\017" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\043\uffb8\044\uffb8\046\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\057\uffb8\060\uffb8\061\uffb8\001\002\000" +
    "\044\007\103\010\073\011\100\012\076\014\065\022\077" +
    "\023\064\031\074\032\075\033\101\034\067\035\104\036" +
    "\070\037\071\040\072\041\102\043\066\001\002\000\112" +
    "\002\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\016\040\017\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\042" +
    "\043\uffb4\044\uffb4\046\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\057\uffb4\060\uffb4\061\uffb4\001\002\000\026\004\061" +
    "\005\054\010\056\016\052\020\044\021\063\024\050\025" +
    "\053\026\045\056\060\001\002\000\030\004\061\005\054" +
    "\010\056\016\052\020\044\021\063\024\050\025\053\026" +
    "\045\043\125\056\060\001\002\000\110\002\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\001\002\000\026\004\061\005\054\010\056\016\052" +
    "\020\044\021\063\024\050\025\053\026\045\056\060\001" +
    "\002\000\026\004\061\005\054\010\056\016\052\020\044" +
    "\021\063\024\050\025\053\026\045\056\060\001\002\000" +
    "\026\004\061\005\054\010\056\016\052\020\044\021\063" +
    "\024\050\025\053\026\045\056\060\001\002\000\026\004" +
    "\061\005\054\010\056\016\052\020\044\021\063\024\050" +
    "\025\053\026\045\056\060\001\002\000\026\004\061\005" +
    "\054\010\056\016\052\020\044\021\063\024\050\025\053" +
    "\026\045\056\060\001\002\000\026\004\061\005\054\010" +
    "\056\016\052\020\044\021\063\024\050\025\053\026\045" +
    "\056\060\001\002\000\026\004\061\005\054\010\056\016" +
    "\052\020\044\021\063\024\050\025\053\026\045\056\060" +
    "\001\002\000\026\004\061\005\054\010\056\016\052\020" +
    "\044\021\063\024\050\025\053\026\045\056\060\001\002" +
    "\000\026\004\061\005\054\010\056\016\052\020\044\021" +
    "\063\024\050\025\053\026\045\056\060\001\002\000\026" +
    "\004\061\005\054\010\056\016\052\020\044\021\063\024" +
    "\050\025\053\026\045\056\060\001\002\000\026\004\061" +
    "\005\054\010\056\016\052\020\044\021\063\024\050\025" +
    "\053\026\045\056\060\001\002\000\026\004\061\005\054" +
    "\010\056\016\052\020\044\021\063\024\050\025\053\026" +
    "\045\056\060\001\002\000\026\004\061\005\054\010\056" +
    "\016\052\020\044\021\063\024\050\025\053\026\045\056" +
    "\060\001\002\000\026\004\061\005\054\010\056\016\052" +
    "\020\044\021\063\024\050\025\053\026\045\056\060\001" +
    "\002\000\106\002\uffbe\006\uffbe\007\103\010\073\011\100" +
    "\012\076\013\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\022" +
    "\077\023\064\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\043" +
    "\uffbe\044\uffbe\046\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\057\uffbe\060\uffbe\061\uffbe\001\002\000\106\002\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\100\012\076\013\uffc8\014\uffc8" +
    "\015\uffc8\017\uffc8\021\uffc8\022\077\023\064\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\046\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\001\002\000\042\007\103\010\073\011\100\012\076\015" +
    "\110\022\077\023\064\031\074\032\075\033\101\034\067" +
    "\035\104\036\070\037\071\040\072\041\102\001\002\000" +
    "\026\004\061\005\054\010\056\016\052\020\044\021\063" +
    "\024\050\025\053\026\045\056\060\001\002\000\106\002" +
    "\uffcb\006\uffcb\007\103\010\073\011\100\012\076\013\uffcb" +
    "\014\uffcb\015\uffcb\017\uffcb\021\uffcb\022\077\023\064\027" +
    "\uffcb\030\uffcb\031\074\032\075\033\101\034\067\035\104" +
    "\036\070\037\071\040\072\041\102\043\uffcb\044\uffcb\046" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\001\002\000\106\002\uffbd\006\uffbd\007\103\010" +
    "\073\011\100\012\076\013\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\021\uffbd\022\077\023\064\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\043\uffbd\044\uffbd\046\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000\106" +
    "\002\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\017\uffc6\021\uffc6\022\uffc6\023\064" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6" +
    "\046\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\001\002\000\106\002\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\021\uffc3\022\uffc3\023\064\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\043\uffc3\044\uffc3\046\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002\000" +
    "\106\002\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5\023" +
    "\064\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\001\002\000\106\002\uffc1\006\uffc1\007" +
    "\103\010\073\011\100\012\076\013\uffc1\014\uffc1\015\uffc1" +
    "\017\uffc1\021\uffc1\022\077\023\064\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\101\034\067\035\104\036\070\037\uffc1" +
    "\040\uffc1\041\uffc1\043\uffc1\044\uffc1\046\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002" +
    "\000\106\002\uffc2\006\uffc2\007\103\010\073\011\100\012" +
    "\076\013\uffc2\014\uffc2\015\uffc2\017\uffc2\021\uffc2\022\077" +
    "\023\064\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\101\034" +
    "\067\035\104\036\070\037\uffc2\040\uffc2\041\uffc2\043\uffc2" +
    "\044\uffc2\046\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\001\002\000\106\002\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\100\012\076\013\uffc7\014\uffc7\015" +
    "\uffc7\017\uffc7\021\uffc7\022\077\023\064\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\046\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\057\uffc7\060\uffc7\061\uffc7\001" +
    "\002\000\106\002\uffbb\006\uffbb\007\103\010\073\011\100" +
    "\012\076\013\uffbb\014\uffbb\015\uffbb\017\uffbb\021\uffbb\022" +
    "\077\023\064\027\uffbb\030\uffbb\031\074\032\075\033\101" +
    "\034\067\035\104\036\070\037\uffbb\040\uffbb\041\uffbb\043" +
    "\uffbb\044\uffbb\046\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\001\002\000\106\002\uffbc\006" +
    "\uffbc\007\103\010\073\011\100\012\076\013\uffbc\014\uffbc" +
    "\015\uffbc\017\uffbc\021\uffbc\022\077\023\064\027\uffbc\030" +
    "\uffbc\031\074\032\075\033\101\034\067\035\104\036\070" +
    "\037\uffbc\040\072\041\uffbc\043\uffbc\044\uffbc\046\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\001\002\000\106\002\uffc0\006\uffc0\007\103\010\073\011" +
    "\100\012\076\013\uffc0\014\uffc0\015\uffc0\017\uffc0\021\uffc0" +
    "\022\077\023\064\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\043\uffc0\044\uffc0\046\uffc0\051\uffc0\052\uffc0\053\uffc0\054" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002\000\106\002\uffbf" +
    "\006\uffbf\007\103\010\073\011\100\012\076\013\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\021\uffbf\022\077\023\064\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\046\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\001\002\000\106\002\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\043\uffd6\044\uffd6\046\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\057\uffd6\060\uffd6\061\uffd6\001\002\000\042\007" +
    "\103\010\073\011\100\012\076\022\077\023\064\031\074" +
    "\032\075\033\101\034\067\035\104\036\070\037\071\040" +
    "\072\041\102\043\127\001\002\000\106\002\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7\046\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\057\uffd7\060\uffd7\061\uffd7\001" +
    "\002\000\106\002\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043" +
    "\uffc4\044\uffc4\046\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\001\002\000\042\007\103\010" +
    "\073\011\100\012\076\022\077\023\064\031\074\032\075" +
    "\033\101\034\067\035\104\036\070\037\071\040\072\041" +
    "\102\043\132\001\002\000\004\043\133\001\002\000\110" +
    "\002\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\046\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\001\002\000\106\002\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\100\012\076\013\uffca\014\uffca\015" +
    "\uffca\017\uffca\021\uffca\022\077\023\064\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\043\uffca\044\uffca\046\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\057\uffca\060\uffca\061\uffca\001" +
    "\002\000\042\007\103\010\073\011\100\012\076\017\136" +
    "\022\077\023\064\031\074\032\075\033\101\034\067\035" +
    "\104\036\070\037\071\040\072\041\102\001\002\000\106" +
    "\002\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd" +
    "\046\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\057\uffcd\060" +
    "\uffcd\061\uffcd\001\002\000\042\007\103\010\073\011\100" +
    "\012\076\022\077\023\064\031\074\032\075\033\101\034" +
    "\067\035\104\036\070\037\071\040\072\041\102\043\140" +
    "\001\002\000\106\002\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\043\uffd5\044\uffd5\046\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\001\002\000\106\002\uffc9" +
    "\006\uffc9\007\103\010\073\011\100\012\076\013\uffc9\014" +
    "\uffc9\015\uffc9\017\uffc9\021\uffc9\022\077\023\064\027\uffc9" +
    "\030\uffc9\031\074\032\075\033\101\034\067\035\104\036" +
    "\070\037\071\040\072\041\102\043\uffc9\044\uffc9\046\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\001\002\000\004\016\172\001\002\000\032\004\061" +
    "\005\054\010\056\016\052\017\uffe5\020\044\021\152\024" +
    "\050\025\053\026\045\056\060\057\145\001\002\000\074" +
    "\002\uffdb\007\103\010\073\011\100\012\076\013\uffdb\021" +
    "\uffdb\022\077\023\064\027\uffdb\030\uffdb\031\074\032\075" +
    "\033\101\034\067\035\104\036\070\037\071\040\072\041" +
    "\102\044\uffdb\046\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\057\uffdb\060\uffdb\061\uffdb\001\002\000\006\014\uffe0\017" +
    "\uffe0\001\002\000\006\014\167\017\uffe6\001\002\000\006" +
    "\014\uffe3\017\uffe3\001\002\000\004\017\162\001\002\000" +
    "\046\006\160\007\103\010\073\011\100\012\076\014\uffe2" +
    "\017\136\022\077\023\064\031\074\032\075\033\101\034" +
    "\067\035\104\036\070\037\071\040\072\041\102\001\002" +
    "\000\052\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014" +
    "\uffb4\016\040\017\153\022\uffb4\023\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\042\042\001\002\000\004\062\154\001\002\000\004" +
    "\045\155\001\002\000\032\021\ufffe\027\ufffe\030\ufffe\044" +
    "\ufffe\046\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\001\002\000\032\021\037\027\015\030" +
    "\030\044\025\046\157\051\026\052\033\053\007\054\011" +
    "\057\017\060\027\061\023\001\002\000\034\002\uffeb\021" +
    "\uffeb\027\uffeb\030\uffeb\044\uffeb\046\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\057\uffeb\060\uffeb\061\uffeb\001\002\000" +
    "\026\004\061\005\054\010\056\016\052\020\044\021\063" +
    "\024\050\025\053\026\045\056\060\001\002\000\044\007" +
    "\103\010\073\011\100\012\076\014\uffe1\017\uffe1\022\077" +
    "\023\064\031\074\032\075\033\101\034\067\035\104\036" +
    "\070\037\071\040\072\041\102\001\002\000\004\062\163" +
    "\001\002\000\004\045\164\001\002\000\032\021\ufffe\027" +
    "\ufffe\030\ufffe\044\ufffe\046\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\054\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002\000\032\021" +
    "\037\027\015\030\030\044\025\046\166\051\026\052\033" +
    "\053\007\054\011\057\017\060\027\061\023\001\002\000" +
    "\034\002\uffec\021\uffec\027\uffec\030\uffec\044\uffec\046\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\057\uffec\060\uffec\061" +
    "\uffec\001\002\000\030\004\061\005\054\010\056\016\052" +
    "\020\044\021\063\024\050\025\053\026\045\056\060\057" +
    "\145\001\002\000\006\014\uffe4\017\uffe4\001\002\000\046" +
    "\006\160\007\103\010\073\011\100\012\076\014\uffe2\017" +
    "\uffe2\022\077\023\064\031\074\032\075\033\101\034\067" +
    "\035\104\036\070\037\071\040\072\041\102\001\002\000" +
    "\032\004\061\005\054\010\056\016\052\017\uffe5\020\044" +
    "\021\063\024\050\025\053\026\045\056\060\057\145\001" +
    "\002\000\004\017\174\001\002\000\004\045\175\001\002" +
    "\000\032\021\ufffe\027\ufffe\030\ufffe\044\ufffe\046\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\001\002\000\032\021\037\027\015\030\030\044\025\046" +
    "\177\051\026\052\033\053\007\054\011\057\017\060\027" +
    "\061\023\001\002\000\034\002\uffed\021\uffed\027\uffed\030" +
    "\uffed\044\uffed\046\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\057\uffed\060\uffed\061\uffed\001\002\000\004\017\201\001" +
    "\002\000\106\002\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043" +
    "\uffd0\044\uffd0\046\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\001\002\000\034\002\ufff6\021" +
    "\ufff6\027\ufff6\030\ufff6\044\ufff6\046\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\057\ufff6\060\ufff6\061\ufff6\001\002\000" +
    "\034\002\uffb2\021\uffb2\027\uffb2\030\uffb2\044\uffb2\046\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\001\002\000\026\004\061\005\054\010\056\016\052" +
    "\020\044\021\063\024\050\025\053\026\045\056\060\001" +
    "\002\000\042\007\103\010\073\011\100\012\076\017\206" +
    "\022\077\023\064\031\074\032\075\033\101\034\067\035" +
    "\104\036\070\037\071\040\072\041\102\001\002\000\004" +
    "\045\207\001\002\000\032\021\ufffe\027\ufffe\030\ufffe\044" +
    "\ufffe\046\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\001\002\000\032\021\037\027\015\030" +
    "\030\044\025\046\211\051\026\052\033\053\007\054\011" +
    "\057\017\060\027\061\023\001\002\000\034\002\uffee\021" +
    "\uffee\027\uffee\030\uffee\044\uffee\046\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\057\uffee\060\uffee\061\uffee\001\002\000" +
    "\032\021\ufffe\027\ufffe\030\ufffe\044\ufffe\046\ufffe\051\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe\061\ufffe\001" +
    "\002\000\032\021\037\027\015\030\030\044\025\046\214" +
    "\051\026\052\033\053\007\054\011\057\017\060\027\061" +
    "\023\001\002\000\004\052\215\001\002\000\004\016\216" +
    "\001\002\000\026\004\061\005\054\010\056\016\052\020" +
    "\044\021\063\024\050\025\053\026\045\056\060\001\002" +
    "\000\042\007\103\010\073\011\100\012\076\017\220\022" +
    "\077\023\064\031\074\032\075\033\101\034\067\035\104" +
    "\036\070\037\071\040\072\041\102\001\002\000\036\002" +
    "\uffef\013\uffef\021\uffef\027\uffef\030\uffef\044\uffef\046\uffef" +
    "\051\uffef\052\uffef\053\uffef\054\uffef\057\uffef\060\uffef\061" +
    "\uffef\001\002\000\026\004\061\005\054\010\056\016\052" +
    "\020\044\021\063\024\050\025\053\026\045\056\060\001" +
    "\002\000\042\007\103\010\073\011\100\012\076\017\223" +
    "\022\077\023\064\031\074\032\075\033\101\034\067\035" +
    "\104\036\070\037\071\040\072\041\102\001\002\000\004" +
    "\045\224\001\002\000\032\021\ufffe\027\ufffe\030\ufffe\044" +
    "\ufffe\046\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe" +
    "\060\ufffe\061\ufffe\001\002\000\032\021\037\027\015\030" +
    "\030\044\025\046\226\051\026\052\033\053\007\054\011" +
    "\057\017\060\027\061\023\001\002\000\034\002\ufff1\021" +
    "\ufff1\027\ufff1\030\ufff1\044\ufff1\046\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\057\ufff1\060\ufff1\061\ufff1\001\002\000" +
    "\026\004\061\005\054\010\056\016\052\020\044\021\063" +
    "\024\050\025\053\026\045\056\060\001\002\000\042\007" +
    "\103\010\073\011\100\012\076\017\231\022\077\023\064" +
    "\031\074\032\075\033\101\034\067\035\104\036\070\037" +
    "\071\040\072\041\102\001\002\000\036\002\uffe9\013\uffe9" +
    "\021\uffe9\027\uffe9\030\uffe9\044\uffe9\046\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\057\uffe9\060\uffe9\061\uffe9\001\002" +
    "\000\026\004\061\005\054\010\056\016\052\020\044\021" +
    "\063\024\050\025\053\026\045\056\060\001\002\000\042" +
    "\007\103\010\073\011\100\012\076\017\234\022\077\023" +
    "\064\031\074\032\075\033\101\034\067\035\104\036\070" +
    "\037\071\040\072\041\102\001\002\000\004\045\235\001" +
    "\002\000\032\021\ufffe\027\ufffe\030\ufffe\044\ufffe\046\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\001\002\000\032\021\037\027\015\030\030\044\025" +
    "\046\237\051\026\052\033\053\007\054\011\057\017\060" +
    "\027\061\023\001\002\000\036\002\uffdc\021\uffdc\027\uffdc" +
    "\030\uffdc\044\uffdc\046\uffdc\047\240\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002\000\006" +
    "\044\025\045\243\001\002\000\034\002\uffdf\021\uffdf\027" +
    "\uffdf\030\uffdf\044\uffdf\046\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\057\uffdf\060\uffdf\061\uffdf\001\002\000\034\002" +
    "\uffdd\021\uffdd\027\uffdd\030\uffdd\044\uffdd\046\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\057\uffdd\060\uffdd\061\uffdd\001" +
    "\002\000\032\021\ufffe\027\ufffe\030\ufffe\044\ufffe\046\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\001\002\000\032\021\037\027\015\030\030\044\025" +
    "\046\245\051\026\052\033\053\007\054\011\057\017\060" +
    "\027\061\023\001\002\000\034\002\uffde\021\uffde\027\uffde" +
    "\030\uffde\044\uffde\046\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\057\uffde\060\uffde\061\uffde\001\002\000\042\007\103" +
    "\010\073\011\100\012\076\015\247\022\077\023\064\031" +
    "\074\032\075\033\101\034\067\035\104\036\070\037\071" +
    "\040\072\041\102\001\002\000\034\002\ufff3\021\ufff3\027" +
    "\ufff3\030\ufff3\044\ufff3\046\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\057\ufff3\060\ufff3\061\ufff3\001\002\000\034\002" +
    "\ufff7\021\ufff7\027\ufff7\030\ufff7\044\ufff7\046\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\057\ufff7\060\ufff7\061\ufff7\001" +
    "\002\000\034\002\ufffc\021\ufffc\027\ufffc\030\ufffc\044\ufffc" +
    "\046\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\001\002\000\026\004\061\005\054\010\056" +
    "\016\052\020\044\021\063\024\050\025\053\026\045\056" +
    "\060\001\002\000\074\002\uffda\007\103\010\073\011\100" +
    "\012\076\013\uffda\021\uffda\022\077\023\064\027\uffda\030" +
    "\uffda\031\074\032\075\033\101\034\067\035\104\036\070" +
    "\037\071\040\072\041\102\044\uffda\046\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\057\uffda\060\uffda\061\uffda\001\002" +
    "\000\034\002\ufff2\021\ufff2\027\ufff2\030\ufff2\044\ufff2\046" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\001\002\000\034\002\ufffd\021\ufffd\027\ufffd\030" +
    "\ufffd\044\ufffd\046\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\001\002\000\030\004\061\005" +
    "\054\010\056\016\052\020\044\021\063\024\050\025\053" +
    "\026\045\042\257\056\060\001\002\000\026\004\061\005" +
    "\054\010\056\016\052\020\044\021\063\024\050\025\053" +
    "\026\045\056\060\001\002\000\042\007\103\010\073\011" +
    "\100\012\076\022\077\023\064\031\074\032\075\033\101" +
    "\034\067\035\104\036\070\037\071\040\072\041\102\043" +
    "\261\001\002\000\110\002\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002\000" +
    "\042\007\103\010\073\011\100\012\076\022\077\023\064" +
    "\031\074\032\075\033\101\034\067\035\104\036\070\037" +
    "\071\040\072\041\102\043\263\001\002\000\004\043\264" +
    "\001\002\000\110\002\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\046\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\057\uffd3\060\uffd3\061\uffd3\001\002\000\004" +
    "\021\266\001\002\000\004\055\267\001\002\000\026\004" +
    "\061\005\054\010\056\016\052\020\044\021\063\024\050" +
    "\025\053\026\045\056\060\001\002\000\042\007\103\010" +
    "\073\011\100\012\076\017\271\022\077\023\064\031\074" +
    "\032\075\033\101\034\067\035\104\036\070\037\071\040" +
    "\072\041\102\001\002\000\004\045\272\001\002\000\032" +
    "\021\ufffe\027\ufffe\030\ufffe\044\ufffe\046\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002" +
    "\000\032\021\037\027\015\030\030\044\025\046\274\051" +
    "\026\052\033\053\007\054\011\057\017\060\027\061\023" +
    "\001\002\000\034\002\ufff0\021\ufff0\027\ufff0\030\ufff0\044" +
    "\ufff0\046\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\006\002\004\026\003\001\001\000\036\006" +
    "\020\010\033\011\030\012\034\013\031\014\015\015\023" +
    "\016\007\017\013\021\017\022\035\024\011\025\021\027" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\250\001\001\000\004\020\247\001\001" +
    "\000\020\003\042\004\245\005\046\017\050\021\054\022" +
    "\035\027\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\042\004\170\005\046\017\050" +
    "\021\054\022\035\023\146\027\012\030\177\031\145\001" +
    "\001\000\020\003\042\004\143\005\046\017\050\021\054" +
    "\022\035\027\012\001\001\000\020\003\042\004\061\005" +
    "\046\017\050\021\054\022\035\027\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\042\004\140\005" +
    "\046\017\050\021\054\022\035\027\012\001\001\000\020" +
    "\003\042\004\136\005\046\017\050\021\054\022\035\027" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\042\004\134\005\046\017\050\021" +
    "\054\022\035\027\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\042\004\133\005" +
    "\046\017\050\021\054\022\035\027\012\001\001\000\020" +
    "\003\042\004\130\005\046\017\050\021\054\022\035\027" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\042\004\127\005" +
    "\046\017\050\021\054\022\035\027\012\001\001\000\020" +
    "\003\042\004\125\005\046\017\050\021\054\022\035\027" +
    "\012\001\001\000\002\001\001\000\020\003\042\004\123" +
    "\005\046\017\050\021\054\022\035\027\012\001\001\000" +
    "\020\003\042\004\122\005\046\017\050\021\054\022\035" +
    "\027\012\001\001\000\020\003\042\004\121\005\046\017" +
    "\050\021\054\022\035\027\012\001\001\000\020\003\042" +
    "\004\120\005\046\017\050\021\054\022\035\027\012\001" +
    "\001\000\020\003\042\004\117\005\046\017\050\021\054" +
    "\022\035\027\012\001\001\000\020\003\042\004\116\005" +
    "\046\017\050\021\054\022\035\027\012\001\001\000\020" +
    "\003\042\004\115\005\046\017\050\021\054\022\035\027" +
    "\012\001\001\000\020\003\042\004\114\005\046\017\050" +
    "\021\054\022\035\027\012\001\001\000\020\003\042\004" +
    "\113\005\046\017\050\021\054\022\035\027\012\001\001" +
    "\000\020\003\042\004\112\005\046\017\050\021\054\022" +
    "\035\027\012\001\001\000\020\003\042\004\111\005\046" +
    "\017\050\021\054\022\035\027\012\001\001\000\020\003" +
    "\042\004\106\005\046\017\050\021\054\022\035\027\012" +
    "\001\001\000\020\003\042\004\105\005\046\017\050\021" +
    "\054\022\035\027\012\001\001\000\020\003\042\004\104" +
    "\005\046\017\050\021\054\022\035\027\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\042\004\110\005\046\017\050\021\054\022\035\027" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\042\004\150\005\046\017\050" +
    "\021\054\022\035\023\146\027\012\030\147\031\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\155\001\001\000\036\006\020\010\033\011\030\012" +
    "\034\013\031\014\015\015\023\016\007\017\013\021\017" +
    "\022\035\024\011\025\021\027\012\001\001\000\002\001" +
    "\001\000\020\003\042\004\160\005\046\017\050\021\054" +
    "\022\035\027\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\164\001\001\000\036" +
    "\006\020\010\033\011\030\012\034\013\031\014\015\015" +
    "\023\016\007\017\013\021\017\022\035\024\011\025\021" +
    "\027\012\001\001\000\002\001\001\000\022\003\042\004" +
    "\170\005\046\017\050\021\054\022\035\023\167\027\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\042\004\170\005\046\017\050\021\054\022\035\023\146" +
    "\027\012\030\172\031\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\175\001\001\000\036\006\020" +
    "\010\033\011\030\012\034\013\031\014\015\015\023\016" +
    "\007\017\013\021\017\022\035\024\011\025\021\027\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\042" +
    "\004\204\005\046\017\050\021\054\022\035\027\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\207" +
    "\001\001\000\036\006\020\010\033\011\030\012\034\013" +
    "\031\014\015\015\023\016\007\017\013\021\017\022\035" +
    "\024\011\025\021\027\012\001\001\000\002\001\001\000" +
    "\004\026\212\001\001\000\036\006\020\010\033\011\030" +
    "\012\034\013\031\014\015\015\023\016\007\017\013\021" +
    "\017\022\035\024\011\025\021\027\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\042\004\216\005" +
    "\046\017\050\021\054\022\035\027\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\042\004\221\005" +
    "\046\017\050\021\054\022\035\027\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\224\001\001\000" +
    "\036\006\020\010\033\011\030\012\034\013\031\014\015" +
    "\015\023\016\007\017\013\021\017\022\035\024\011\025" +
    "\021\027\012\001\001\000\002\001\001\000\020\003\042" +
    "\004\227\005\046\017\050\021\054\022\035\027\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\042" +
    "\004\232\005\046\017\050\021\054\022\035\027\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\235" +
    "\001\001\000\036\006\020\010\033\011\030\012\034\013" +
    "\031\014\015\015\023\016\007\017\013\021\017\022\035" +
    "\024\011\025\021\027\012\001\001\000\004\007\240\001" +
    "\001\000\004\010\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\243\001\001\000\036\006\020\010" +
    "\033\011\030\012\034\013\031\014\015\015\023\016\007" +
    "\017\013\021\017\022\035\024\011\025\021\027\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\042\004" +
    "\252\005\046\017\050\021\054\022\035\027\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\042\004\257\005\046\017\050\021\054\022\035" +
    "\027\012\001\001\000\020\003\042\004\261\005\046\017" +
    "\050\021\054\022\035\027\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\042\004\267\005\046\017\050\021\054\022\035\027" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\272\001\001\000\036\006\020\010\033\011\030\012" +
    "\034\013\031\014\015\015\023\016\007\017\013\021\017" +
    "\022\035\024\011\025\021\027\012\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sint$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sint$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sint$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ArrayList miarr = new ArrayList<Nodo>();

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sint$actions {
  private final Sint parser;

  /** Constructor */
  CUP$Sint$actions(Sint parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sint$do_action_part00000000(
    int                        CUP$Sint$act_num,
    java_cup.runtime.lr_parser CUP$Sint$parser,
    java.util.Stack            CUP$Sint$stack,
    int                        CUP$Sint$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sint$result;

      /* select the action based on the action number */
      switch (CUP$Sint$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		RESULT = start_val;
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sint$parser.done_parsing();
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 miarr = e;  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 arr.add(a); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",20, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",20, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= LLAMADAFUNC SALIDA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION SALIDA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= FUN_IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECFUNC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= DO_WHILE SALIDA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= TRANSFERENCIA SALIDA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CASES 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CASES ::= Case EXPRESION dosPuntos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = new Case(aleft , aright , n); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CASES ::= Default dosPuntos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = new Default(aleft , aright);  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SWITCH ::= Switch parenI EXPRESION parenD llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n2 = new Instrucciones_cuerpo(0,0,arr);
                                                                RESULT = new Switch(aleft , aright ,n1 , n2); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FOR ::= For parenI iden In EXPRESION parenD llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n2 = new Instrucciones_cuerpo(0,0,arr); 
                                                        RESULT = new For(aleft , aright , n1 , n2 , a);        
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DO_WHILE ::= Do llavei INSTRUCCIONES llaved While parenI EXPRESION parenD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-7)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n = new Instrucciones_cuerpo(0,0,arr); 
                                                                        RESULT = new Do_while(aleft , aright , n , n1);
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("DO_WHILE",19, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WHILE ::= While parenI EXPRESION parenD llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n1 = new Instrucciones_cuerpo(0,0,arr); 
                                                                        RESULT = new While(aleft , aright , n , n1); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECFUNC ::= iden igual Function parenI LISTA_PARAMS_FUN parenD llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-8)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int arr2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arr2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 
                        Nodo n = new Instrucciones_cuerpo(0,0 , arr2);
                        arr.add(n);
                        RESULT = new Asignacion_funcion(aleft , aright , arr , a); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("DECFUNC",7, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECFUNC ::= iden igual parenI LISTA_PARAMS_FUN parenD flecha llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-8)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int arr2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arr2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		
                        Nodo n = new Instrucciones_cuerpo(0,0 , arr2);
                        arr.add(n);
                        RESULT = new Asignacion_funcion(aleft , aright , arr , a);
                
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("DECFUNC",7, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECFUNC ::= iden igual parenI iden parenD flecha llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int arr2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arr2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		
                        Nodo n1 = new Instrucciones_cuerpo(0,0,arr2);
                        ArrayList<Nodo> arr = new ArrayList<Nodo>(); 
                        arr.add(new Iden(nleft , nright , n)); arr.add(n1);
                        RESULT = new Asignacion_funcion(aleft , aright , arr , a); 
                
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("DECFUNC",7, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TRANSFERENCIA ::= Return 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new Retorno(aleft, aright , null); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",8, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TRANSFERENCIA ::= Return parenI EXPRESION parenD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = new Retorno(aleft, aright , n);    
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",8, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TRANSFERENCIA ::= Break 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		RESULT = new Parar( aleft, aright ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",8, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TRANSFERENCIA ::= Continue 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		RESULT = new Continuar( aleft, aright ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",8, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_PARAMS_FUN ::= LISTA_PARAMS_FUN2 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMS_FUN",22, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_PARAMS_FUN ::= 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMS_FUN",22, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_PARAMS_FUN2 ::= LISTA_PARAMS_FUN2 coma PARAMS_DEC_FUN 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 arr.add(n); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMS_FUN2",23, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_PARAMS_FUN2 ::= PARAMS_DEC_FUN 
            {
              ArrayList<Nodo> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 ArrayList<Nodo> arr = new ArrayList<Nodo>(); arr.add(n); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMS_FUN2",23, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS_DEC_FUN ::= EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT =  n; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PARAMS_DEC_FUN",17, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMS_DEC_FUN ::= EXPRESION igual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT =  new e_e(aleft , aright , n, n1); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PARAMS_DEC_FUN",17, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS_DEC_FUN ::= Default 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		RESULT = new Default(aleft, aright); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PARAMS_DEC_FUN",17, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUN_IF ::= If parenI EXPRESION parenD llavei INSTRUCCIONES llaved ELSE_IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  Nodo n1 = new Instrucciones_cuerpo(0 , 0 , arr); 
                                                                                        /* if operador expresiones_cuerpo*/ 
                                                                                        ArrayList<Nodo> arr2 = new ArrayList<Nodo>();
                                                                                        arr2.add(n); arr2.add(n1);
                                                                                        if(n2 != null){ arr2.add(n2); }
                                                                                        RESULT = new If(aleft , aright ,arr2 );
                                                                                        
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("FUN_IF",6, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSE_IF ::= Else llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = new Instrucciones_cuerpo(0 , 0 , arr);  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ELSE_IF",5, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELSE_IF ::= Else FUN_IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ELSE_IF",5, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELSE_IF ::= 
            {
              Nodo RESULT =null;
		 RESULT = null;
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ELSE_IF",5, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= iden igual EXPRESION 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 Nodo n  =  new Iden(ileft , iright , i);
                                              RESULT  =  new Asignacion(aleft, aright , n , n2); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= IDEN_ACCESO igual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT  =  new Asignacion(aleft, aright , n , n2); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IDEN_ACCESO ::= IDEN_ACCESO2 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = n;  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO",15, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IDEN_ACCESO ::= LISTACORCHETES 
            {
              Nodo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new Var_acceso(arr.get(0).fila, arr.get(0).columna , arr);  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO",15, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IDEN_ACCESO2 ::= iden cori EXPRESION coma EXPRESION cord 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n = new AccesoMatriz(tleft , tright , n1 , n2 );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO2",16, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IDEN_ACCESO2 ::= iden cori EXPRESION coma cord 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		 Nodo n = new AccesoMatriz(tleft , tright , n1 , true );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO2",16, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IDEN_ACCESO2 ::= iden cori coma EXPRESION cord 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n = new AccesoMatriz(tleft , tright , n1 , false );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO2",16, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTACORCHETES ::= LISTACORCHETES cori EXPRESION cord 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 arr.add(new Acceso(aleft , aright , n , false )); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",21, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTACORCHETES ::= LISTACORCHETES cori cori EXPRESION cord cord 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		 arr.add(new Acceso(aleft , aright , n , true )); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",21, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTACORCHETES ::= iden cori EXPRESION cord 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		ArrayList<Nodo> arr = new ArrayList<Nodo>(); 
                        Nodo n =  new Iden(aleft , aright , a);  
                        arr.add(n);arr.add(new Acceso(aleft , aright , n2 , false ));   RESULT  = arr;  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",21, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTACORCHETES ::= iden cori cori EXPRESION cord cord 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		ArrayList<Nodo> arr = new ArrayList<Nodo>(); 
                        Nodo n =  new Iden(aleft , aright , a);  
                        arr.add(n);arr.add(new Acceso(aleft , aright , n2 , true ));   RESULT  = arr;  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",21, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LLAMADAFUNC ::= iden parenI LISTA_PARAMS_FUN parenD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = new Llamada_metodo(aleft, aright , arr, a);    
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",13, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= ARITMETICA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = e; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= PRIMITIVO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = e; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = e; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= LLAMADAFUNC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = e; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION preg EXPRESION dosPuntos EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 ArrayList<Nodo> arr = new ArrayList<Nodo>();
                arr.add(n); arr.add(n1); arr.add(n2); 
                RESULT = new Ternario(aleft , aright , arr);   
                
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARITMETICA ::= menos EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorUnario(aleft  , aright, n, Op.neg);                     
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARITMETICA ::= not EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorUnario(aleft  , aright, n, Op.not);                     
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mas);          
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menos);        
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.por);          
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.div);          
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARITMETICA ::= EXPRESION potencia EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.potencia);     
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARITMETICA ::= EXPRESION modular EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.modulo);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARITMETICA ::= EXPRESION igualigual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.comparacion);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARITMETICA ::= EXPRESION noigual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.desigualdad);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARITMETICA ::= EXPRESION mayorque EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mayorque);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARITMETICA ::= EXPRESION mayorigual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mayorigual);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARITMETICA ::= EXPRESION menorque EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menorque);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARITMETICA ::= EXPRESION menorigual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menorigual);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARITMETICA ::= EXPRESION or EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.or);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARITMETICA ::= EXPRESION and EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.and);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRIMITIVO ::= numerico 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new  Primitivo(eleft , eright , Tipos.numerico,  Double.parseDouble(e) ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PRIMITIVO ::= cadena 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		   RESULT = new  Primitivo(eleft , eright , Tipos.cadena,  e ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRIMITIVO ::= entero 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		   RESULT = new  Primitivo(eleft , eright , Tipos.entero,  e ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRIMITIVO ::= True 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		   RESULT = new  Primitivo(eleft , eright , Tipos.booleano,  true ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRIMITIVO ::= False 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		   RESULT = new  Primitivo(eleft , eright , Tipos.booleano,  false ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRIMITIVO ::= IDEN_ACCESO 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = n; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PRIMITIVO ::= iden 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT =  new Iden(aleft , aright , a); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRIMITIVO ::= Null 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new  Primitivo(eleft , eright , Tipos.nulo,  "" ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SALIDA ::= pComa 
            {
              Nodo RESULT =null;

              CUP$Sint$result = parser.getSymbolFactory().newSymbol("SALIDA",14, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SALIDA ::= 
            {
              Nodo RESULT =null;

              CUP$Sint$result = parser.getSymbolFactory().newSymbol("SALIDA",14, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sint$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sint$do_action(
    int                        CUP$Sint$act_num,
    java_cup.runtime.lr_parser CUP$Sint$parser,
    java.util.Stack            CUP$Sint$stack,
    int                        CUP$Sint$top)
    throws java.lang.Exception
    {
              return CUP$Sint$do_action_part00000000(
                               CUP$Sint$act_num,
                               CUP$Sint$parser,
                               CUP$Sint$stack,
                               CUP$Sint$top);
    }
}

}
