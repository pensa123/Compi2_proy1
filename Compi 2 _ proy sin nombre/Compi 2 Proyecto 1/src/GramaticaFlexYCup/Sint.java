
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Sintactico;

import java_cup.runtime.*;
import java.util.ArrayList;
import ClasesAuxiliares.Nodo;
import FuncionesDelLenguaje.Print;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sint extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sint() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sint(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sint(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\003\000\002\007\003\000\002\010\007" +
    "\000\002\004\003\000\002\004\003\000\002\004\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\003\003\000\002\003" +
    "\003\000\002\011\003\000\002\011\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\017\010\001\002\000\006\002\ufffe\017" +
    "\ufffe\001\002\000\006\002\000\017\010\001\002\000\006" +
    "\002\ufffd\017\ufffd\001\002\000\004\002\037\001\002\000" +
    "\004\014\011\001\002\000\012\004\012\007\016\014\015" +
    "\016\013\001\002\000\014\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\015\ufff3\001\002\000\014\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\015\ufff2\001\002\000\014\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\015\ufffb\001\002\000\012\004\012\007\016" +
    "\014\015\016\013\001\002\000\012\004\012\007\016\014" +
    "\015\016\013\001\002\000\014\006\022\007\023\010\021" +
    "\011\025\015\024\001\002\000\014\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\015\ufffa\001\002\000\012\004\012\007\016" +
    "\014\015\016\013\001\002\000\012\004\012\007\016\014" +
    "\015\016\013\001\002\000\012\004\012\007\016\014\015" +
    "\016\013\001\002\000\010\002\ufff0\012\030\017\ufff0\001" +
    "\002\000\012\004\012\007\016\014\015\016\013\001\002" +
    "\000\014\006\ufff4\007\ufff4\010\ufff4\011\ufff4\015\ufff4\001" +
    "\002\000\006\002\ufffc\017\ufffc\001\002\000\006\002\ufff1" +
    "\017\ufff1\001\002\000\014\006\ufff6\007\ufff6\010\021\011" +
    "\025\015\ufff6\001\002\000\014\006\ufff7\007\ufff7\010\021" +
    "\011\025\015\ufff7\001\002\000\014\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\015\ufff5\001\002\000\014\006\ufff8\007\ufff8" +
    "\010\021\011\025\015\ufff8\001\002\000\014\006\022\007" +
    "\023\010\021\011\025\015\036\001\002\000\014\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\015\ufff9\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\017\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\012\002\006\006\004\007\003\010\005\001" +
    "\001\000\002\001\001\000\006\007\037\010\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\017\004\016\005\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\017\004" +
    "\034\005\013\001\001\000\010\003\017\004\033\005\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\017\004\032\005\013\001\001\000\010\003\017\004\031" +
    "\005\013\001\001\000\010\003\017\004\030\005\013\001" +
    "\001\000\004\011\026\001\001\000\010\003\017\004\025" +
    "\005\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sint$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sint$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sint$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ArrayList arr = new ArrayList<Nodo>();

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sint$actions {
  private final Sint parser;

  /** Constructor */
  CUP$Sint$actions(Sint parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sint$do_action_part00000000(
    int                        CUP$Sint$act_num,
    java_cup.runtime.lr_parser CUP$Sint$parser,
    java.util.Stack            CUP$Sint$stack,
    int                        CUP$Sint$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sint$result;

      /* select the action based on the action number */
      switch (CUP$Sint$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		RESULT = start_val;
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sint$parser.done_parsing();
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 arr.add((Nodo)a); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 arr.add((Nodo)a); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPRIMIR ::= imprimir parenI EXPRESION parenD SALIDA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		RESULT = new Print(eleft, eright , null); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",6, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRESION ::= ARITMETICA 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPRESION ::= PRIMITIVO 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ARITMETICA ::= menos EXPRESION 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PRIMITIVO ::= numero 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PRIMITIVO ::= cadena 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SALIDA ::= pComa 
            {
              Object RESULT =null;

              CUP$Sint$result = parser.getSymbolFactory().newSymbol("SALIDA",7, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SALIDA ::= 
            {
              Object RESULT =null;

              CUP$Sint$result = parser.getSymbolFactory().newSymbol("SALIDA",7, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sint$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sint$do_action(
    int                        CUP$Sint$act_num,
    java_cup.runtime.lr_parser CUP$Sint$parser,
    java.util.Stack            CUP$Sint$stack,
    int                        CUP$Sint$top)
    throws java.lang.Exception
    {
              return CUP$Sint$do_action_part00000000(
                               CUP$Sint$act_num,
                               CUP$Sint$parser,
                               CUP$Sint$stack,
                               CUP$Sint$top);
    }
}

}
