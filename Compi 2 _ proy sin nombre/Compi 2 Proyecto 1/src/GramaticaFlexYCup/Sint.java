
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package GramaticaFlexYCup;

import java_cup.runtime.*;
import java.util.ArrayList;
import FuncionesDelLenguaje.Parar;
import FuncionesDelLenguaje.Continuar;
import FuncionesDelLenguaje.Retorno;
import FuncionesDelLenguaje.For;
import FuncionesDelLenguaje.While;
import FuncionesDelLenguaje.Do_while;
import FuncionesDelLenguaje.If;
import objetos.Llamada_metodo;
import objetos.Instrucciones_cuerpo;
import objetos.Asignacion_funcion;
import ClasesAuxiliares.contenedorEnum.Tipos;
import ClasesAuxiliares.contenedorEnum.Tipos;
import ClasesAuxiliares.Nodo;
import FuncionesDelLenguaje.Print;
import Comparadores.Ternario;
import objetos.Iden;
import objetos.Asignacion;
import objetos.Acceso;
import objetos.AccesoMatriz;
import objetos.Var_acceso;
import objetos.Primitivo;
import objetos.OperadorBinario;
import objetos.OperadorBinario.Operando;
import objetos.OperadorUnario;
import objetos.OperadorUnario.Op;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sint extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sint() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sint(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sint(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\025" +
    "\004\000\002\025\002\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\004\000\002\013\004\000\002\022\012\000\002" +
    "\021\011\000\002\011\013\000\002\012\003\000\002\012" +
    "\006\000\002\012\003\000\002\012\003\000\002\027\003" +
    "\000\002\027\002\000\002\030\005\000\002\030\003\000" +
    "\002\020\003\000\002\020\005\000\002\010\012\000\002" +
    "\007\006\000\002\007\004\000\002\007\002\000\002\006" +
    "\005\000\002\006\005\000\002\016\003\000\002\016\003" +
    "\000\002\017\010\000\002\017\007\000\002\017\007\000" +
    "\002\026\006\000\002\026\010\000\002\026\006\000\002" +
    "\014\006\000\002\023\003\000\002\023\002\000\002\024" +
    "\005\000\002\024\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\004\003\000\002\004\007\000" +
    "\002\005\004\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\015\003\000\002\015\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\022\002\ufffe\021\ufffe\027\ufffe\030\ufffe\044" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\022\002\000" +
    "\021\027\027\014\030\022\044\020\051\021\052\024\053" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\026\002\ufff0\013\ufff0\021\ufff0\027\ufff0\030" +
    "\ufff0\044\ufff0\046\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002" +
    "\000\024\002\uffff\021\uffff\027\uffff\030\uffff\044\uffff\046" +
    "\uffff\051\uffff\052\uffff\053\uffff\001\002\000\024\002\ufff9" +
    "\021\ufff9\027\ufff9\030\ufff9\044\ufff9\046\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\001\002\000\100\002\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\017" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\216\043\uffe2\044\uffe2\046\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\001\002\000\026\002\uffb9\013\154\021" +
    "\uffb9\027\uffb9\030\uffb9\044\uffb9\046\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\001\002\000\026\002\ufff1\013\ufff1\021\ufff1\027" +
    "\ufff1\030\ufff1\044\ufff1\046\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\001\002\000\004\006\213\001\002\000\026\002\uffb9\013" +
    "\154\021\uffb9\027\uffb9\030\uffb9\044\uffb9\046\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\001\002\000\026\002\uffb9\013\154\021" +
    "\uffb9\027\uffb9\030\uffb9\044\uffb9\046\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\001\002\000\004\016\175\001\002\000\030\002" +
    "\ufff3\013\ufff3\016\172\021\ufff3\027\ufff3\030\ufff3\044\ufff3" +
    "\046\ufff3\051\ufff3\052\ufff3\053\ufff3\001\002\000\004\045" +
    "\163\001\002\000\024\002\ufffa\021\ufffa\027\ufffa\030\ufffa" +
    "\044\ufffa\046\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000" +
    "\004\016\155\001\002\000\024\002\ufffb\021\ufffb\027\ufffb" +
    "\030\ufffb\044\ufffb\046\ufffb\051\ufffb\052\ufffb\053\ufffb\001" +
    "\002\000\026\002\uffb9\013\154\021\uffb9\027\uffb9\030\uffb9" +
    "\044\uffb9\046\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002\000" +
    "\010\006\031\016\032\042\033\001\002\000\076\002\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3\046\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\001\002\000\026\004\046\005" +
    "\037\010\044\016\047\020\041\021\043\024\051\025\050" +
    "\026\036\050\134\001\002\000\026\004\046\005\037\010" +
    "\044\016\047\017\uffd9\020\041\021\043\024\051\025\050" +
    "\026\036\001\002\000\026\004\046\005\037\010\044\014" +
    "\035\016\047\020\041\021\043\024\051\025\050\026\036" +
    "\001\002\000\074\002\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6" +
    "\044\uffd6\046\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000" +
    "\024\004\046\005\037\010\044\016\047\020\041\021\043" +
    "\024\051\025\050\026\036\001\002\000\024\004\046\005" +
    "\037\010\044\016\047\020\041\021\043\024\051\025\050" +
    "\026\036\001\002\000\074\002\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\043\uffc1\044\uffc1\046\uffc1\051\uffc1\052\uffc1\053\uffc1\001" +
    "\002\000\074\002\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\017\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044" +
    "\uffd5\046\uffd5\051\uffd5\052\uffd5\053\uffd5\001\002\000\074" +
    "\002\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0\044\uffc0\046\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\001\002\000\074\002\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\017\uffd3\021\uffd3\022\uffd3\023\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\043\uffd3\044\uffd3\046\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\001\002\000\100\002\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\032\017" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\033\043\uffbb\044\uffbb\046\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\001\002\000\024\004\046\005\037\010" +
    "\044\016\047\020\041\021\043\024\051\025\050\026\036" +
    "\001\002\000\074\002\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\043\uffbc" +
    "\044\uffbc\046\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000" +
    "\074\002\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\046" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000\024\004\046" +
    "\005\037\010\044\016\047\020\041\021\043\024\051\025" +
    "\050\026\036\001\002\000\074\002\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\043\uffbd\044\uffbd\046\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\001\002\000\074\002\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe" +
    "\044\uffbe\046\uffbe\051\uffbe\052\uffbe\053\uffbe\001\002\000" +
    "\044\007\072\010\061\011\067\012\064\014\054\022\066" +
    "\023\053\031\063\032\065\033\070\034\056\035\073\036" +
    "\057\037\060\040\062\041\071\043\055\001\002\000\024" +
    "\004\046\005\037\010\044\016\047\020\041\021\043\024" +
    "\051\025\050\026\036\001\002\000\026\004\046\005\037" +
    "\010\044\016\047\020\041\021\043\024\051\025\050\026" +
    "\036\043\114\001\002\000\100\002\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\001\002\000\024\004\046\005\037\010" +
    "\044\016\047\020\041\021\043\024\051\025\050\026\036" +
    "\001\002\000\024\004\046\005\037\010\044\016\047\020" +
    "\041\021\043\024\051\025\050\026\036\001\002\000\024" +
    "\004\046\005\037\010\044\016\047\020\041\021\043\024" +
    "\051\025\050\026\036\001\002\000\024\004\046\005\037" +
    "\010\044\016\047\020\041\021\043\024\051\025\050\026" +
    "\036\001\002\000\024\004\046\005\037\010\044\016\047" +
    "\020\041\021\043\024\051\025\050\026\036\001\002\000" +
    "\024\004\046\005\037\010\044\016\047\020\041\021\043" +
    "\024\051\025\050\026\036\001\002\000\024\004\046\005" +
    "\037\010\044\016\047\020\041\021\043\024\051\025\050" +
    "\026\036\001\002\000\024\004\046\005\037\010\044\016" +
    "\047\020\041\021\043\024\051\025\050\026\036\001\002" +
    "\000\024\004\046\005\037\010\044\016\047\020\041\021" +
    "\043\024\051\025\050\026\036\001\002\000\024\004\046" +
    "\005\037\010\044\016\047\020\041\021\043\024\051\025" +
    "\050\026\036\001\002\000\024\004\046\005\037\010\044" +
    "\016\047\020\041\021\043\024\051\025\050\026\036\001" +
    "\002\000\024\004\046\005\037\010\044\016\047\020\041" +
    "\021\043\024\051\025\050\026\036\001\002\000\024\004" +
    "\046\005\037\010\044\016\047\020\041\021\043\024\051" +
    "\025\050\026\036\001\002\000\024\004\046\005\037\010" +
    "\044\016\047\020\041\021\043\024\051\025\050\026\036" +
    "\001\002\000\074\002\uffc5\007\072\010\061\011\067\012" +
    "\064\013\uffc5\014\uffc5\015\uffc5\017\uffc5\021\uffc5\022\066" +
    "\023\053\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5" +
    "\044\uffc5\046\uffc5\051\uffc5\052\uffc5\053\uffc5\001\002\000" +
    "\074\002\uffcf\007\uffcf\010\061\011\067\012\064\013\uffcf" +
    "\014\uffcf\015\uffcf\017\uffcf\021\uffcf\022\066\023\053\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf\046" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\001\002\000\042\007\072" +
    "\010\061\011\067\012\064\015\077\022\066\023\053\031" +
    "\063\032\065\033\070\034\056\035\073\036\057\037\060" +
    "\040\062\041\071\001\002\000\024\004\046\005\037\010" +
    "\044\016\047\020\041\021\043\024\051\025\050\026\036" +
    "\001\002\000\074\002\uffd2\007\072\010\061\011\067\012" +
    "\064\013\uffd2\014\uffd2\015\uffd2\017\uffd2\021\uffd2\022\066" +
    "\023\053\027\uffd2\030\uffd2\031\063\032\065\033\070\034" +
    "\056\035\073\036\057\037\060\040\062\041\071\043\uffd2" +
    "\044\uffd2\046\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002\000" +
    "\074\002\uffc4\007\072\010\061\011\067\012\064\013\uffc4" +
    "\014\uffc4\015\uffc4\017\uffc4\021\uffc4\022\066\023\053\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4\046" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\001\002\000\074\002\uffcd" +
    "\007\uffcd\010\061\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\017\uffcd\021\uffcd\022\uffcd\023\053\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\046\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\001\002\000\074\002\uffca\007\uffca\010" +
    "\061\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca" +
    "\021\uffca\022\uffca\023\053\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\043\uffca\044\uffca\046\uffca\051\uffca\052\uffca\053" +
    "\uffca\001\002\000\074\002\uffc8\007\072\010\061\011\067" +
    "\012\064\013\uffc8\014\uffc8\015\uffc8\017\uffc8\021\uffc8\022" +
    "\066\023\053\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\070" +
    "\034\056\035\073\036\057\037\uffc8\040\uffc8\041\uffc8\043" +
    "\uffc8\044\uffc8\046\uffc8\051\uffc8\052\uffc8\053\uffc8\001\002" +
    "\000\074\002\uffcc\007\uffcc\010\061\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\017\uffcc\021\uffcc\022\uffcc\023\053" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc" +
    "\046\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000\074\002" +
    "\uffc9\007\072\010\061\011\067\012\064\013\uffc9\014\uffc9" +
    "\015\uffc9\017\uffc9\021\uffc9\022\066\023\053\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\070\034\056\035\073\036\057" +
    "\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\046\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\001\002\000\074\002\uffc2\007\072" +
    "\010\061\011\067\012\064\013\uffc2\014\uffc2\015\uffc2\017" +
    "\uffc2\021\uffc2\022\066\023\053\027\uffc2\030\uffc2\031\063" +
    "\032\065\033\070\034\056\035\073\036\057\037\uffc2\040" +
    "\uffc2\041\uffc2\043\uffc2\044\uffc2\046\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\001\002\000\074\002\uffce\007\uffce\010\061\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\017\uffce\021\uffce" +
    "\022\uffce\023\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\043\uffce\044\uffce\046\uffce\051\uffce\052\uffce\053\uffce\001" +
    "\002\000\074\002\uffc3\007\072\010\061\011\067\012\064" +
    "\013\uffc3\014\uffc3\015\uffc3\017\uffc3\021\uffc3\022\066\023" +
    "\053\027\uffc3\030\uffc3\031\063\032\065\033\070\034\056" +
    "\035\073\036\057\037\uffc3\040\062\041\uffc3\043\uffc3\044" +
    "\uffc3\046\uffc3\051\uffc3\052\uffc3\053\uffc3\001\002\000\074" +
    "\002\uffc7\007\072\010\061\011\067\012\064\013\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\021\uffc7\022\066\023\053\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\046\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\001\002\000\074\002\uffc6\007" +
    "\072\010\061\011\067\012\064\013\uffc6\014\uffc6\015\uffc6" +
    "\017\uffc6\021\uffc6\022\066\023\053\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\043\uffc6\044\uffc6\046\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\001\002\000\076\002\uffe0\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\044\uffe0\046\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\001\002\000\042\007\072\010\061\011\067\012" +
    "\064\022\066\023\053\031\063\032\065\033\070\034\056" +
    "\035\073\036\057\037\060\040\062\041\071\043\116\001" +
    "\002\000\076\002\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\044\uffe1\046\uffe1\051\uffe1\052\uffe1\053\uffe1\001\002" +
    "\000\074\002\uffcb\007\uffcb\010\061\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb" +
    "\046\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000\042\007" +
    "\072\010\061\011\067\012\064\017\121\022\066\023\053" +
    "\031\063\032\065\033\070\034\056\035\073\036\057\037" +
    "\060\040\062\041\071\001\002\000\074\002\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\043\uffd4\044\uffd4\046\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\001\002\000\074\002\uffd1\007\uffd1\010\061\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\043\uffd1\044\uffd1\046\uffd1\051\uffd1\052\uffd1\053\uffd1\001" +
    "\002\000\074\002\uffd0\007\uffd0\010\061\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\017\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0\044" +
    "\uffd0\046\uffd0\051\uffd0\052\uffd0\053\uffd0\001\002\000\042" +
    "\007\072\010\061\011\067\012\064\022\066\023\053\031" +
    "\063\032\065\033\070\034\056\035\073\036\057\037\060" +
    "\040\062\041\071\043\125\001\002\000\076\002\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\046\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\001\002\000\004\017\133\001\002" +
    "\000\006\014\131\017\uffda\001\002\000\044\007\072\010" +
    "\061\011\067\012\064\014\uffd7\017\uffd7\022\066\023\053" +
    "\031\063\032\065\033\070\034\056\035\073\036\057\037" +
    "\060\040\062\041\071\001\002\000\024\004\046\005\037" +
    "\010\044\016\047\020\041\021\043\024\051\025\050\026" +
    "\036\001\002\000\044\007\072\010\061\011\067\012\064" +
    "\014\uffd8\017\uffd8\022\066\023\053\031\063\032\065\033" +
    "\070\034\056\035\073\036\057\037\060\040\062\041\071" +
    "\001\002\000\074\002\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb" +
    "\044\uffdb\046\uffdb\051\uffdb\052\uffdb\053\uffdb\001\002\000" +
    "\004\016\136\001\002\000\064\002\uffe5\007\072\010\061" +
    "\011\067\012\064\013\uffe5\021\uffe5\022\066\023\053\027" +
    "\uffe5\030\uffe5\031\063\032\065\033\070\034\056\035\073" +
    "\036\057\037\060\040\062\041\071\044\uffe5\046\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\001\002\000\006\017\uffee\021\141" +
    "\001\002\000\004\017\147\001\002\000\006\014\145\017" +
    "\uffef\001\002\000\010\006\143\014\uffeb\017\uffeb\001\002" +
    "\000\006\014\uffec\017\uffec\001\002\000\024\004\046\005" +
    "\037\010\044\016\047\020\041\021\043\024\051\025\050" +
    "\026\036\001\002\000\044\007\072\010\061\011\067\012" +
    "\064\014\uffea\017\uffea\022\066\023\053\031\063\032\065" +
    "\033\070\034\056\035\073\036\057\037\060\040\062\041" +
    "\071\001\002\000\004\021\141\001\002\000\006\014\uffed" +
    "\017\uffed\001\002\000\004\045\150\001\002\000\022\021" +
    "\ufffe\027\ufffe\030\ufffe\044\ufffe\046\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\001\002\000\022\021\027\027\014\030\022\044" +
    "\020\046\152\051\021\052\024\053\007\001\002\000\024" +
    "\002\ufff4\021\ufff4\027\ufff4\030\ufff4\044\ufff4\046\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\001\002\000\024\002\ufff7\021\ufff7" +
    "\027\ufff7\030\ufff7\044\ufff7\046\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\001\002\000\024\002\uffba\021\uffba\027\uffba\030\uffba" +
    "\044\uffba\046\uffba\051\uffba\052\uffba\053\uffba\001\002\000" +
    "\024\004\046\005\037\010\044\016\047\020\041\021\043" +
    "\024\051\025\050\026\036\001\002\000\042\007\072\010" +
    "\061\011\067\012\064\017\157\022\066\023\053\031\063" +
    "\032\065\033\070\034\056\035\073\036\057\037\060\040" +
    "\062\041\071\001\002\000\004\045\160\001\002\000\022" +
    "\021\ufffe\027\ufffe\030\ufffe\044\ufffe\046\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\001\002\000\022\021\027\027\014\030\022" +
    "\044\020\046\162\051\021\052\024\053\007\001\002\000" +
    "\024\002\ufff5\021\ufff5\027\ufff5\030\ufff5\044\ufff5\046\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\001\002\000\022\021\ufffe\027" +
    "\ufffe\030\ufffe\044\ufffe\046\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\001\002\000\022\021\027\027\014\030\022\044\020\046" +
    "\165\051\021\052\024\053\007\001\002\000\004\052\166" +
    "\001\002\000\004\016\167\001\002\000\024\004\046\005" +
    "\037\010\044\016\047\020\041\021\043\024\051\025\050" +
    "\026\036\001\002\000\042\007\072\010\061\011\067\012" +
    "\064\017\171\022\066\023\053\031\063\032\065\033\070" +
    "\034\056\035\073\036\057\037\060\040\062\041\071\001" +
    "\002\000\026\002\ufff6\013\ufff6\021\ufff6\027\ufff6\030\ufff6" +
    "\044\ufff6\046\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002\000" +
    "\024\004\046\005\037\010\044\016\047\020\041\021\043" +
    "\024\051\025\050\026\036\001\002\000\042\007\072\010" +
    "\061\011\067\012\064\017\174\022\066\023\053\031\063" +
    "\032\065\033\070\034\056\035\073\036\057\037\060\040" +
    "\062\041\071\001\002\000\026\002\ufff2\013\ufff2\021\ufff2" +
    "\027\ufff2\030\ufff2\044\ufff2\046\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\001\002\000\024\004\046\005\037\010\044\016\047" +
    "\020\041\021\043\024\051\025\050\026\036\001\002\000" +
    "\042\007\072\010\061\011\067\012\064\017\177\022\066" +
    "\023\053\031\063\032\065\033\070\034\056\035\073\036" +
    "\057\037\060\040\062\041\071\001\002\000\004\045\200" +
    "\001\002\000\022\021\ufffe\027\ufffe\030\ufffe\044\ufffe\046" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\022\021\027" +
    "\027\014\030\022\044\020\046\202\051\021\052\024\053" +
    "\007\001\002\000\026\002\uffe6\021\uffe6\027\uffe6\030\uffe6" +
    "\044\uffe6\046\uffe6\047\203\051\uffe6\052\uffe6\053\uffe6\001" +
    "\002\000\006\044\020\045\206\001\002\000\024\002\uffe9" +
    "\021\uffe9\027\uffe9\030\uffe9\044\uffe9\046\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\001\002\000\024\002\uffe7\021\uffe7\027\uffe7" +
    "\030\uffe7\044\uffe7\046\uffe7\051\uffe7\052\uffe7\053\uffe7\001" +
    "\002\000\022\021\ufffe\027\ufffe\030\ufffe\044\ufffe\046\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\001\002\000\022\021\027\027" +
    "\014\030\022\044\020\046\210\051\021\052\024\053\007" +
    "\001\002\000\024\002\uffe8\021\uffe8\027\uffe8\030\uffe8\044" +
    "\uffe8\046\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002\000\024" +
    "\002\ufff8\021\ufff8\027\ufff8\030\ufff8\044\ufff8\046\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\001\002\000\024\002\ufffc\021\ufffc" +
    "\027\ufffc\030\ufffc\044\ufffc\046\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\001\002\000\024\004\046\005\037\010\044\016\047" +
    "\020\041\021\043\024\051\025\050\026\036\001\002\000" +
    "\064\002\uffe4\007\072\010\061\011\067\012\064\013\uffe4" +
    "\021\uffe4\022\066\023\053\027\uffe4\030\uffe4\031\063\032" +
    "\065\033\070\034\056\035\073\036\057\037\060\040\062" +
    "\041\071\044\uffe4\046\uffe4\051\uffe4\052\uffe4\053\uffe4\001" +
    "\002\000\024\002\ufffd\021\ufffd\027\ufffd\030\ufffd\044\ufffd" +
    "\046\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\026\004" +
    "\046\005\037\010\044\016\047\020\041\021\043\024\051" +
    "\025\050\026\036\042\217\001\002\000\024\004\046\005" +
    "\037\010\044\016\047\020\041\021\043\024\051\025\050" +
    "\026\036\001\002\000\042\007\072\010\061\011\067\012" +
    "\064\022\066\023\053\031\063\032\065\033\070\034\056" +
    "\035\073\036\057\037\060\040\062\041\071\043\221\001" +
    "\002\000\100\002\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde\021\uffde\022" +
    "\uffde\023\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\046\uffde\051\uffde\052\uffde\053\uffde" +
    "\001\002\000\042\007\072\010\061\011\067\012\064\022" +
    "\066\023\053\031\063\032\065\033\070\034\056\035\073" +
    "\036\057\037\060\040\062\041\071\043\223\001\002\000" +
    "\004\043\224\001\002\000\100\002\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\002\004\025\003\001\001\000\030\006" +
    "\015\010\024\011\022\012\025\013\007\014\012\016\014" +
    "\017\027\021\010\022\016\026\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\211" +
    "\001\001\000\004\015\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\037\004\134" +
    "\005\033\014\041\016\044\017\027\026\011\001\001\000" +
    "\024\003\037\004\127\005\033\014\041\016\044\017\027" +
    "\023\125\024\126\026\011\001\001\000\020\003\037\004" +
    "\051\005\033\014\041\016\044\017\027\026\011\001\001" +
    "\000\002\001\001\000\020\003\037\004\123\005\033\014" +
    "\041\016\044\017\027\026\011\001\001\000\020\003\037" +
    "\004\122\005\033\014\041\016\044\017\027\026\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\037\004" +
    "\121\005\033\014\041\016\044\017\027\026\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\037\004" +
    "\117\005\033\014\041\016\044\017\027\026\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\037\004\116\005\033\014\041\016\044\017\027" +
    "\026\011\001\001\000\020\003\037\004\114\005\033\014" +
    "\041\016\044\017\027\026\011\001\001\000\002\001\001" +
    "\000\020\003\037\004\112\005\033\014\041\016\044\017" +
    "\027\026\011\001\001\000\020\003\037\004\111\005\033" +
    "\014\041\016\044\017\027\026\011\001\001\000\020\003" +
    "\037\004\110\005\033\014\041\016\044\017\027\026\011" +
    "\001\001\000\020\003\037\004\107\005\033\014\041\016" +
    "\044\017\027\026\011\001\001\000\020\003\037\004\106" +
    "\005\033\014\041\016\044\017\027\026\011\001\001\000" +
    "\020\003\037\004\105\005\033\014\041\016\044\017\027" +
    "\026\011\001\001\000\020\003\037\004\104\005\033\014" +
    "\041\016\044\017\027\026\011\001\001\000\020\003\037" +
    "\004\103\005\033\014\041\016\044\017\027\026\011\001" +
    "\001\000\020\003\037\004\102\005\033\014\041\016\044" +
    "\017\027\026\011\001\001\000\020\003\037\004\101\005" +
    "\033\014\041\016\044\017\027\026\011\001\001\000\020" +
    "\003\037\004\100\005\033\014\041\016\044\017\027\026" +
    "\011\001\001\000\020\003\037\004\075\005\033\014\041" +
    "\016\044\017\027\026\011\001\001\000\020\003\037\004" +
    "\074\005\033\014\041\016\044\017\027\026\011\001\001" +
    "\000\020\003\037\004\073\005\033\014\041\016\044\017" +
    "\027\026\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\037\004\077\005\033\014" +
    "\041\016\044\017\027\026\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\037\004\131\005\033" +
    "\014\041\016\044\017\027\026\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\141\027\136\030\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\037\004\143\005\033\014\041\016\044\017" +
    "\027\026\011\001\001\000\002\001\001\000\004\020\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\150\001\001\000\030\006\015\010\024\011\022\012\025" +
    "\013\007\014\012\016\014\017\027\021\010\022\016\026" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\037\004\155\005\033\014\041\016" +
    "\044\017\027\026\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\160\001\001\000\030\006\015\010" +
    "\024\011\022\012\025\013\007\014\012\016\014\017\027" +
    "\021\010\022\016\026\011\001\001\000\002\001\001\000" +
    "\004\025\163\001\001\000\030\006\015\010\024\011\022" +
    "\012\025\013\007\014\012\016\014\017\027\021\010\022" +
    "\016\026\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\037\004\167\005\033\014\041\016\044\017" +
    "\027\026\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\037\004\172\005\033\014\041\016\044\017" +
    "\027\026\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\037\004\175\005\033\014\041\016\044\017" +
    "\027\026\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\200\001\001\000\030\006\015\010\024\011" +
    "\022\012\025\013\007\014\012\016\014\017\027\021\010" +
    "\022\016\026\011\001\001\000\004\007\203\001\001\000" +
    "\004\010\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\206\001\001\000\030\006\015\010\024\011" +
    "\022\012\025\013\007\014\012\016\014\017\027\021\010" +
    "\022\016\026\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\037\004\213\005\033" +
    "\014\041\016\044\017\027\026\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\037\004\217\005\033" +
    "\014\041\016\044\017\027\026\011\001\001\000\020\003" +
    "\037\004\221\005\033\014\041\016\044\017\027\026\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sint$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sint$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sint$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ArrayList miarr = new ArrayList<Nodo>();

    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + s.left +" Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico en la Línea " + s.left+ "__Columna "+s.right+ ". No se esperaba este componente: " +s.value); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sint$actions {
  private final Sint parser;

  /** Constructor */
  CUP$Sint$actions(Sint parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sint$do_action_part00000000(
    int                        CUP$Sint$act_num,
    java_cup.runtime.lr_parser CUP$Sint$parser,
    java.util.Stack            CUP$Sint$stack,
    int                        CUP$Sint$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sint$result;

      /* select the action based on the action number */
      switch (CUP$Sint$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		RESULT = start_val;
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sint$parser.done_parsing();
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 miarr = e;  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 arr.add(a); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",19, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",19, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= LLAMADAFUNC SALIDA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION SALIDA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= FUN_IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECFUNC 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= WHILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DO_WHILE SALIDA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= TRANSFERENCIA SALIDA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DO_WHILE ::= Do llavei INSTRUCCIONES llaved While parenI EXPRESION parenD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-7)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n = new Instrucciones_cuerpo(0,0,arr); 
                                                                        RESULT = new Do_while(aleft , aright , n , n1);
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("DO_WHILE",16, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // WHILE ::= While parenI EXPRESION parenD llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n1 = new Instrucciones_cuerpo(0,0,arr); 
                                                                        RESULT = new While(aleft , aright , n , n1); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("WHILE",15, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-6)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECFUNC ::= iden igual Function parenI LISTA_PARAMS_FUN parenD llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-8)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int arr2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arr2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 
                        Nodo n = new Instrucciones_cuerpo(0,0 , arr2);
                        arr.add(n);
                        RESULT = new Asignacion_funcion(aleft , aright , arr , a); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("DECFUNC",7, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-8)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TRANSFERENCIA ::= Return 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new Retorno(aleft, aright , null); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",8, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TRANSFERENCIA ::= Return parenI EXPRESION parenD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = new Retorno(aleft, aright , n);    
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",8, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TRANSFERENCIA ::= Break 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		RESULT = new Parar( aleft, aright ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",8, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TRANSFERENCIA ::= Continue 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		RESULT = new Continuar( aleft, aright ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIA",8, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_PARAMS_FUN ::= LISTA_PARAMS_FUN2 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMS_FUN",21, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_PARAMS_FUN ::= 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = new ArrayList<Nodo>(); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMS_FUN",21, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_PARAMS_FUN2 ::= LISTA_PARAMS_FUN2 coma PARAMS_DEC_FUN 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 arr.add(n); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMS_FUN2",22, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_PARAMS_FUN2 ::= PARAMS_DEC_FUN 
            {
              ArrayList<Nodo> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 ArrayList<Nodo> arr = new ArrayList<Nodo>(); arr.add(n); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMS_FUN2",22, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMS_DEC_FUN ::= iden 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT =  new Iden(aleft , aright , a); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PARAMS_DEC_FUN",14, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMS_DEC_FUN ::= iden igual EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT =  new Iden(aleft , aright , a, n); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PARAMS_DEC_FUN",14, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUN_IF ::= If parenI EXPRESION parenD llavei INSTRUCCIONES llaved ELSE_IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  Nodo n1 = new Instrucciones_cuerpo(0 , 0 , arr); 
                                                                                        /* if operador expresiones_cuerpo*/ 
                                                                                        ArrayList<Nodo> arr2 = new ArrayList<Nodo>();
                                                                                        arr2.add(n); arr2.add(n1);
                                                                                        if(n2 != null){ arr2.add(n2); }
                                                                                        RESULT = new If(aleft , aright ,arr2 );
                                                                                        
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("FUN_IF",6, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-7)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSE_IF ::= Else llavei INSTRUCCIONES llaved 
            {
              Nodo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = new Instrucciones_cuerpo(0 , 0 , arr);  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ELSE_IF",5, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSE_IF ::= Else FUN_IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ELSE_IF",5, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELSE_IF ::= 
            {
              Nodo RESULT =null;
		 RESULT = null;
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ELSE_IF",5, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= iden igual EXPRESION 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 Nodo n  =  new Iden(ileft , iright , i);
                                              RESULT  =  new Asignacion(aleft, aright , n , n2); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= IDEN_ACCESO igual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT  =  new Asignacion(aleft, aright , n , n2); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IDEN_ACCESO ::= IDEN_ACCESO2 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = n;  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IDEN_ACCESO ::= LISTACORCHETES 
            {
              Nodo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new Var_acceso(arr.get(0).fila, arr.get(0).columna , arr);  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO",12, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IDEN_ACCESO2 ::= iden cori EXPRESION coma EXPRESION cord 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n = new AccesoMatriz(tleft , tright , n1 , n2 );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO2",13, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IDEN_ACCESO2 ::= iden cori EXPRESION coma cord 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		 Nodo n = new AccesoMatriz(tleft , tright , n1 , true );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO2",13, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IDEN_ACCESO2 ::= iden cori coma EXPRESION cord 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 Nodo n = new AccesoMatriz(tleft , tright , n1 , false );  
                                                                       RESULT = new Var_acceso(tleft , tright , new Iden(aleft , aright , a) , n); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("IDEN_ACCESO2",13, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTACORCHETES ::= LISTACORCHETES cori EXPRESION cord 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 arr.add(new Acceso(aleft , aright , n , false )); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",20, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTACORCHETES ::= LISTACORCHETES cori cori EXPRESION cord cord 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		 arr.add(new Acceso(aleft , aright , n , true )); RESULT = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",20, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-5)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTACORCHETES ::= iden cori EXPRESION cord 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		ArrayList<Nodo> arr = new ArrayList<Nodo>(); 
                        Nodo n =  new Iden(aleft , aright , a);  
                        arr.add(n);arr.add(new Acceso(aleft , aright , n2 , false ));   RESULT  = arr;  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTACORCHETES",20, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LLAMADAFUNC ::= iden parenI LISTAPARAMS parenD 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = new Llamada_metodo(aleft, aright , arr, a);    
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LLAMADAFUNC",10, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTAPARAMS ::= LISTAPARAMS2 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		ArrayList<Nodo> a = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = a;  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",17, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTAPARAMS ::= 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT  = new ArrayList<>();  
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",17, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAPARAMS2 ::= LISTAPARAMS2 coma EXPRESION 
            {
              ArrayList<Nodo> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		ArrayList<Nodo> arr = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 arr.add(a);  RESULT  = arr; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS2",18, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTAPARAMS2 ::= EXPRESION 
            {
              ArrayList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 ArrayList<Nodo> arr = new ArrayList<>();  arr.add(a); RESULT = arr;   
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS2",18, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= ARITMETICA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = e; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= PRIMITIVO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = e; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= parenI EXPRESION parenD 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		 RESULT = e; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= LLAMADAFUNC 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = e; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION preg EXPRESION dosPuntos EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 ArrayList<Nodo> arr = new ArrayList<Nodo>();
                arr.add(n); arr.add(n1); arr.add(n2); 
                RESULT = new Ternario(aleft , aright , arr);   
                
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-4)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARITMETICA ::= menos EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorUnario(aleft  , aright, n, Op.neg);                     
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARITMETICA ::= not EXPRESION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorUnario(aleft  , aright, n, Op.not);                     
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARITMETICA ::= EXPRESION mas EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mas);          
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARITMETICA ::= EXPRESION menos EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menos);        
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARITMETICA ::= EXPRESION por EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.por);          
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARITMETICA ::= EXPRESION division EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.div);          
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARITMETICA ::= EXPRESION potencia EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.potencia);     
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARITMETICA ::= EXPRESION modular EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.modulo);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARITMETICA ::= EXPRESION igualigual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.comparacion);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARITMETICA ::= EXPRESION noigual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.desigualdad);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARITMETICA ::= EXPRESION mayorque EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mayorque);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARITMETICA ::= EXPRESION mayorigual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.mayorigual);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARITMETICA ::= EXPRESION menorque EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menorque);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARITMETICA ::= EXPRESION menorigual EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.menorigual);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARITMETICA ::= EXPRESION or EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.or);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARITMETICA ::= EXPRESION and EXPRESION 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.elementAt(CUP$Sint$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new OperadorBinario(aleft , aright, n , n2, Operando.and);         
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sint$stack.elementAt(CUP$Sint$top-2)), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRIMITIVO ::= numerico 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT = new  Primitivo(eleft , eright , Tipos.numerico,  Double.parseDouble(e) ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRIMITIVO ::= cadena 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		   RESULT = new  Primitivo(eleft , eright , Tipos.cadena,  e ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRIMITIVO ::= entero 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		   RESULT = new  Primitivo(eleft , eright , Tipos.entero,  e ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRIMITIVO ::= True 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		   RESULT = new  Primitivo(eleft , eright , Tipos.booleano,  true ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRIMITIVO ::= False 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		   RESULT = new  Primitivo(eleft , eright , Tipos.booleano,  false ); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRIMITIVO ::= IDEN_ACCESO 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		  RESULT = n; 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRIMITIVO ::= iden 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sint$stack.peek()).value;
		 RESULT =  new Iden(aleft , aright , a); 
              CUP$Sint$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",1, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SALIDA ::= pComa 
            {
              Nodo RESULT =null;

              CUP$Sint$result = parser.getSymbolFactory().newSymbol("SALIDA",11, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SALIDA ::= 
            {
              Nodo RESULT =null;

              CUP$Sint$result = parser.getSymbolFactory().newSymbol("SALIDA",11, ((java_cup.runtime.Symbol)CUP$Sint$stack.peek()), RESULT);
            }
          return CUP$Sint$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sint$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sint$do_action(
    int                        CUP$Sint$act_num,
    java_cup.runtime.lr_parser CUP$Sint$parser,
    java.util.Stack            CUP$Sint$stack,
    int                        CUP$Sint$top)
    throws java.lang.Exception
    {
              return CUP$Sint$do_action_part00000000(
                               CUP$Sint$act_num,
                               CUP$Sint$parser,
                               CUP$Sint$stack,
                               CUP$Sint$top);
    }
}

}
