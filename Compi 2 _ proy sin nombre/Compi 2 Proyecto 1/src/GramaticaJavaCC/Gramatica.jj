options {
  IGNORE_CASE = true;
  STATIC = false;
}

PARSER_BEGIN(Gramatica)
/** Analizador de expresiones aritmeticas sencillas. */
package GramaticaJavaCC; 

//clases de java :D
import java.util.ArrayList;
//clases mias de mi :D

import FuncionesDelLenguaje.Parar;
import FuncionesDelLenguaje.Continuar;
import FuncionesDelLenguaje.Retorno;

import FuncionesDelLenguaje.Switch;
import FuncionesDelLenguaje.For;
import FuncionesDelLenguaje.While;
import FuncionesDelLenguaje.Do_while;

import FuncionesDelLenguaje.If;

import objetos.Case;
import objetos.Default;
import objetos.Llamada_metodo;
import objetos.Instrucciones_cuerpo;
import objetos.Asignacion_funcion;

import ClasesAuxiliares.contenedorEnum.Tipos;

import ClasesAuxiliares.contenedorEnum.Tipos;

import ClasesAuxiliares.Nodo;
import FuncionesDelLenguaje.Print;

import Comparadores.Ternario;

import objetos.Iden;
import objetos.Asignacion;


import objetos.Acceso;
import objetos.AccesoMatriz;
import objetos.Var_acceso;

import objetos.Primitivo;

import objetos.OperadorBinario;
import objetos.OperadorBinario.Operando;

import objetos.OperadorUnario;
import objetos.OperadorUnario.Op;


public class Gramatica {

  public ArrayList arr = new ArrayList<Nodo>();

}
PARSER_END(Gramatica)

/** Lexico */
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
    | <"#" (~["\n", "\r"])*>
    | <"#*" (~["*"])* "*" ("*" | ~["*","#"] (~["*"])* "*")* "#">
}

TOKEN : {
      <NUMERO: (["0"-"9"])+>
    | <DECIMAL: (["0"-"9"])+"."(["0"-"9"])+>
    | <NULL: "null">
    | <TRUE: "true">
    | <FALSE: "false">
    //| <IMPRIMIR: "print">
    | <MIENTRAS: "while">
    | <CASE: "case">
    | <SWITCH: "switch">
    | <FOR: "for">
    | <DO: "do">
    | <SDEFAULT: "default" >
    | <FUNCION: "function">
    | <RETORNO: "Return">
    | <BREAK: "Break">
    | <CONTINUE: "continue">
    | <IN: "in">
    | <SI: "if">
    | <SINO: "else">
    | <PCOMA: ";">
    | <DOSPUNTOS: ":">
    | <PARENI: "(">
    | <PAREND: ")">
    | <CORI: "[">
    | <CORD: "]">
    | <LLAVEI: "{">
    | <LLAVED: "}">
    | <MODULO: "%%">
    | <POTENCIA: "^">
    | <MAS: "+">
    | <PREG: "?">
    | <MENOS: "-">
    | <POR: "*">
    | <DIV: "/">
    | <IGUAL: "=">
    | <MENORQUE: "<">
    | <MAYORQUE: ">">
    | <MENORIGUAL: "<=">
    | <MAYORIGUAL: ">=">
    | <IGUALACION: "==">
    | <DIFERENCIACION: "!=">
    | <COMA: ",">
    | <AND: "&">
    | <OR: "|">
    | <NOT: "!" >
    | <IDENTIFICADOR: (["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z",".", "_"] | ["0"-"9"] )*
                      | 
                      "." (["a"-"z","A"-"Z","." , "_"] ( ["a"-"z","A"-"Z",".", "_"] | ["0"-"9"] )*)? ) >
}

MORE :
{
    "\"" :STRING_STATE
}

<STRING_STATE> MORE:
{
    <~["\""]>
}

<STRING_STATE> TOKEN:
{
   <STRING:"\""> : DEFAULT 
}
/** Fin Lexico */


/** ProducciÃ³n inicial 
    Analizar -> (Instruccion)+ EOF
*/
void Analizar() :
{
  Nodo n; 
}
{
  ( n = InstruccionGlobal() { arr.add(n); })+ <EOF> { }
}

Nodo instrucciones_cuerpos():
{
  ArrayList<Nodo> arr = new ArrayList<Nodo>(); Nodo n ; 
}
{
  ( n =  InstruccionCuerpo() { arr.add(n); } )* 
  {

    return new Instrucciones_cuerpo(0 , 0 , arr);
  }
}

Nodo  InstruccionGlobal() :
  {
    Nodo n; 
  }
  {
    (
      n = InstruccionCuerpo()
    ){ return n; }
  }


  Nodo InstruccionCuerpo():
  {
    Nodo n= null; 
  }
  {
    (
      n = Cases()
      |
      <CONTINUE> { n = new Continuar( token.beginLine, token.beginColumn );} (<PCOMA>)?
      |
      <BREAK>    { n = new Parar( token.beginLine, token.beginColumn ); }  (<PCOMA>)?
      |
      n = ciclos_if()
      |
      <RETORNO> (<PARENI> n =  Expresion()  <PAREND>)? (<PCOMA>)? {n = new Retorno(token.beginLine, token.beginColumn , n);}
      |
      n = Asignacion_llamadaMetodo()
    )  {return n;   }
  }

  ArrayList<Nodo> lista_param_dec_func() : 
  {
    ArrayList<Nodo> arr = new ArrayList<Nodo>();
    Nodo n = null , n1; Token t; 
  }
  {
    ( t = <IDENTIFICADOR> (<IGUAL> n =  Expresion())? { arr.add(new Iden(t.beginLine , t.beginColumn , t.image , n)); n = null; }   
    (<COMA> t =  <IDENTIFICADOR> (<IGUAL> n = Expresion() )? { arr.add(new Iden(t.beginLine , t.beginColumn , t.image , n)); n = null; }  )* )?
    { return arr; }
  }


  Nodo Cases():
  {
    Nodo n ,n1 , n2; Token t; 
  }
  {
    (
    t = <CASE> n1= Expresion() <DOSPUNTOS>  {n = new Case(t.beginLine , t.beginColumn , n1); }
    |
    t = <SDEFAULT> <DOSPUNTOS>    {n = new Default(t.beginLine , t.beginColumn); }
    ){
      return n;
    }
  }

  Nodo Asignacion_llamadaMetodo() : 
  {
    Nodo n1 , n2; Token t, t2; ArrayList<Nodo> arr;  
  }
  {
    (
      t2 = <IDENTIFICADOR> { n1 = new Iden(t2.beginLine, t2.beginColumn , t2.image);  }
      (
        //Asignacion    a = 2; 
        t=<IGUAL>  (
            n2 = Expresion()  (<PCOMA>)?  //Fin asginacion
            {    return new Asignacion(t.beginLine, t.beginColumn , n1 , n2); }
            |
              <FUNCION> <PARENI> arr = lista_param_dec_func()  <PAREND> <LLAVEI>
                n2 =   instrucciones_cuerpos()
              <LLAVED>
              { arr.add(n2);  return new Asignacion_funcion(t2.beginLine , t2.beginColumn , arr , t2.image); }
            )
         |
         //asignacion de a[1] = 2; 
         <CORI> n1 = Acceso_vec_mat(n1) 
         t=<IGUAL>  n2 = Expresion()  (<PCOMA>)?  //Fin asginacion
         { return new Asignacion(t.beginLine, t.beginColumn , n1 , n2); }
         //lamada a metodo
         |
         arr = params_metodo() (<PCOMA>)?
         { return new Llamada_metodo(t2.beginLine , t2.beginColumn , arr , t2.image ); }
         //fin llamada a metodo
      ) 
    ) 
  }

  Nodo ciclos_if():
  {
    Nodo n ;
  }
  {
    (
     n =  si()
     |
     n = While()
     |
     n = do_while()
     |
     n = foreach()
     |
     n = Switch()
    )
    {
      return n;
    }
  }

  Nodo Switch():
  {
    Nodo n , n1, n2; Token t; 
  }
  { 
     t = <SWITCH> <PARENI> n1 =   Expresion() <PAREND> <LLAVEI> n2 =  instrucciones_cuerpos() <LLAVED> 
     {
        return new Switch(t.beginLine , t.beginColumn , n1 , n2); 
     }
  }


  Nodo foreach():
  {
    Nodo n , n1 , n2; Token t , t1;
  }
  {
    t1 = <FOR> <PARENI> t = <IDENTIFICADOR> <IN> n1 =  Expresion() <PAREND> <LLAVEI>
      n2 =   instrucciones_cuerpos()
    <LLAVED>
    {
      return new For(t1.beginLine , t1.beginColumn , n1 , n2 , t.image);
    }
  }

  Nodo While():
  {
    Nodo n, n1; Token t; 
  }
  {
    t = <MIENTRAS> <PARENI> n= Expresion()  <PAREND>  
    <LLAVEI> n1= instrucciones_cuerpos()  <LLAVED>
    {
      return new While(t.beginLine , t.beginColumn , n , n1);
    }
  }

  Nodo do_while():
  {
    Nodo n, n1; Token t;
  }
  {
    t = <DO> <LLAVEI> n =  instrucciones_cuerpos()  <LLAVED> <MIENTRAS> <PARENI> n1 = Expresion() <PAREND> (<PCOMA>)?
    {
      return new Do_while(t.beginLine , t.beginColumn , n , n1);
    }
  }

  Nodo si():
  {
    Nodo n; Token t; 
    ArrayList<Nodo> arr = new ArrayList<Nodo>();
  }
  {
    (
      t = <SI> <PARENI> n = Expresion() { arr.add(n); }  <PAREND> <LLAVEI> n =  instrucciones_cuerpos() {arr.add(n); }  
      <LLAVED>  ( n =  sino_si()  { arr.add(n); }  )?
    ){
      return new If(t.beginLine , t.beginColumn ,arr );
    }
  }

  Nodo sino_si():
  {
    Token t; 
    Nodo n , n2 ; 
  }
  {
    t = <SINO> (
      n = si() 
      |
      <LLAVEI> n =  instrucciones_cuerpos()   <LLAVED>
    ){
      return n;
    }
  }


 

/*  Nodo  Imprimir() :
  { 
    Nodo n; 
  }
  {
      <IMPRIMIR> <PARENI> n = Expresion() <PAREND> (<PCOMA>)? {return new Print(token.beginLine, token.beginColumn , n); }
      
  }*/
 

Nodo Expresion() :
  {
    Nodo n , n2 , n3; Token t; 
    ArrayList<Nodo> arr = new ArrayList<Nodo>();
  }
  {
      n = CondicionOR() ( t = <PREG> n2 = Expresion() <DOSPUNTOS> n3 = Expresion()  
            {arr.add(n); arr.add(n2); arr.add(n3); n = new Ternario(t.beginLine , t.beginColumn , arr); } 
          )?
      { 
        return n;
      }
  }

  Nodo CondicionOR() : 
  {
    Nodo n , n2;
  }
  {
    n = CondicionAnd() 
    (
        <OR> n2 = CondicionAnd() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.or); }
    )*
    { 
      return n;
    }
  }


  Nodo CondicionAnd() :
  { 
    Nodo n , n2; 
  }
  {
      n = ExpresionIgualdad() 
      (
          <AND> n2 = ExpresionIgualdad() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.and); }
      )*
      {
        return n;
      }
  }

  Nodo  ExpresionIgualdad() :
  {
    Nodo n , n2; 
  }
  {
      n = ExpresionRelacional() 
      (
          <IGUALACION> n2 = ExpresionRelacional() {n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.comparacion);}
          |
          <DIFERENCIACION> n2 =  ExpresionRelacional() {n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.desigualdad); }
      )*
      {
        return n;
      }
  }
  

Nodo ExpresionRelacional() :
  { 
    Nodo n , n2;
  }
  {
     n = ExpresionAditiva() 
      (
          <MAYORQUE> n2 = ExpresionAditiva() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.mayorque);}
          |
          <MENORQUE> n2 = ExpresionAditiva() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.menorque);}
          |
          <MAYORIGUAL> n2 = ExpresionAditiva() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.mayorigual);}
          |
          <MENORIGUAL> n2 = ExpresionAditiva() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.menorigual);}
      )*
      {
        return n;
      }
  }
 
 Nodo  ExpresionAditiva() :
  {
    Nodo n , n2;
  }
  {
      n = ExpresionMultiplicativa()
      (
          <MAS> n2=  ExpresionMultiplicativa() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.mas); }
          |
          <MENOS> n2 = ExpresionMultiplicativa() {n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.menos); }
      )*
      {
        return n;
      }
  }

 Nodo ExpresionMultiplicativa() :
  {
    Nodo n , n2;
  }
  {
      n = ExpPotencia()
      (
          <POR> n2 = ExpPotencia() {n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.por); }
          |
          <DIV> n2 = ExpPotencia() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.div);}
      )*
      {
        return n;
      }
  }

  Nodo ExpPotencia() :
  {
    Nodo n , n2;
  }
  {
      n = ExpresionUnaria()
      (
          <POTENCIA> n2 = ExpresionUnaria() {n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.potencia); }
          |
          <MODULO> n2 = ExpresionUnaria() { n = new OperadorBinario(token.beginLine , token.beginColumn, n , n2, Operando.modulo);}
      )*
      {
        return n;
      }
  }


  Nodo ExpresionUnaria() :
  {
    Nodo n ;
  }
  {
    (
      <MENOS> n = ExpresionUnaria() {n = new OperadorUnario(token.beginLine , token.beginColumn, n, Op.neg);  }
      |
      <NOT> n = ExpresionUnaria() { n = new OperadorUnario(token.beginLine , token.beginColumn, n, Op.not);  }
      |
      n= Primitivo() {}
    ){
      return n;
    }
  }

  Nodo Primitivo() :
  {
    Nodo n; Token t; ArrayList<Nodo> arr = new ArrayList<Nodo>(); 
  }
  {
    (
      <NUMERO> { n = new Primitivo( token.beginLine, token.beginColumn , Tipos.entero , Double.parseDouble(token.image)  ); }
      |
      <DECIMAL> {n = new Primitivo( token.beginLine, token.beginColumn , Tipos.numerico , Double.parseDouble(token.image)  );  }
      |
      t = <STRING> {n = new Primitivo( token.beginLine, token.beginColumn , Tipos.cadena , t.image.substring(1,t.image.length()-1)  ); }
      |
      <TRUE>   { n = new Primitivo( token.beginLine, token.beginColumn , Tipos.booleano , true  ); }
      |
      <FALSE>  {n = new Primitivo( token.beginLine, token.beginColumn , Tipos.booleano , false  ); }
      |
      t = <IDENTIFICADOR> { n = new Iden(t.beginLine, t.beginColumn , t.image); }
          (
                <CORI> n = Acceso_vec_mat(n)  
                |
                arr = params_metodo()  { n = new Llamada_metodo(t.beginLine, t.beginColumn , arr, t.image);  }
          )?
      

      |
      <NULL> {n  = new Primitivo(token.beginLine , token.beginColumn , Tipos.nulo, "");}
      |
      <PARENI> n= Expresion() <PAREND> { }
    )
    {
      return n;
    } 
  }

  
  ArrayList<Nodo> params_metodo():
  {
    ArrayList<Nodo> arr = new ArrayList<Nodo>(); Nodo n; Token t; 
  }
  {
    <PARENI> ( (n = Expresion() {arr.add(n);} | t =  <SDEFAULT> { n = new Default(t.beginLine , t.beginColumn); arr.add(n); }  ) ( 
      <COMA> ( n =  Expresion() {arr.add(n);} | t =  <SDEFAULT> { n = new Default(t.beginLine , t.beginColumn); arr.add(n); } ) )*  )?  <PAREND>
    { return arr;  }
  }







  // E , E    |   E ,   |  , E 
  Nodo Acceso_vec_mat(Nodo n):
  {
    Nodo  n1 , n2; Token t; 
    ArrayList<Nodo> arr = new ArrayList<Nodo>();
  }
  {
    (             
      n1 = Expresion() ( <CORD> { arr.add(n); arr.add(new Acceso(n1.fila , n1.columna , n1 , false ) ); }  ( n1 =  Acceso_lista()  { arr.add(n1); }  )*  
      {return new Var_acceso(n.fila, n.columna , arr);}  /* [E]([E] | [[E]])*  */
                    | t =  <COMA> (
                            n2 = Expresion() <CORD> {n1 =  new AccesoMatriz(t.beginLine, t.beginColumn , n1 , n2 );
                                                    return new Var_acceso(n.fila, n.columna , n , n1); }   /* [E,E] */
                            | 
                            <CORD>    {n1 =  new AccesoMatriz(t.beginLine, t.beginColumn , n1 , true );
                                        return new Var_acceso(n.fila, n.columna , n , n1);}           /* [E,] */
                            )
                  )
      |
      t = <COMA> (
       n1 =  Expresion() <CORD>   {n1 =  new AccesoMatriz(t.beginLine, t.beginColumn , n1 , false );
                                    return new Var_acceso(n.fila, n.columna , n , n1);} /* [,E] */
      )
    |
    <CORI> n1 = Expresion() { arr.add(n);  arr.add(new Acceso(n1.fila , n1.columna , n1 , true ) ); } <CORD> <CORD> (n1 = Acceso_lista() {arr.add(n1);  } )*  
    { return new Var_acceso(n.fila, n.columna , arr);}    /* [[E]]([E] | [[E]])*  */
    )
    {
      return n;
    }
  }

  Nodo Acceso_lista():
  {
    Nodo n1; 
  }
  {
    (
      <CORI> 
        ( n1 =  Expresion() <CORD> { n1 =  new Acceso(n1.fila , n1.columna , n1 , false );  }
            |
        <CORI> n1 =  Expresion() <CORD> <CORD> { n1 = new Acceso(n1.fila , n1.columna , n1 , true ); }
      )
    )
    {
      return n1;
    }
  }