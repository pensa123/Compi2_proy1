/* The following code was generated by JFlex 1.4.1 on 1/03/19 11:27 PM */


package Analizador;

import java.io.*;   
import javax.swing.text.Segment;   
   
import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/03/19 11:27 PM from the specification file
 * <tt>ColoresFS.txt</tt>
 */
public class ColoresFS extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\7\1\0\1\6\23\0\1\6\1\43\1\4\1\10"+
    "\1\11\1\0\1\45\1\3\2\13\1\43\1\43\1\0\1\43\1\12"+
    "\1\43\12\2\1\46\1\0\1\43\1\47\1\0\1\43\1\0\1\21"+
    "\1\35\1\24\1\33\1\26\1\23\1\36\1\42\1\25\1\40\1\1"+
    "\1\16\1\30\1\14\1\17\1\31\1\37\1\22\1\32\1\27\1\15"+
    "\1\20\1\1\1\34\1\41\1\1\1\13\1\5\1\13\1\43\1\1"+
    "\1\0\1\21\1\35\1\24\1\33\1\26\1\23\1\36\1\42\1\25"+
    "\1\40\1\1\1\16\1\30\1\14\1\17\1\31\1\37\1\22\1\32"+
    "\1\27\1\15\1\20\1\1\1\34\1\41\1\1\1\13\1\44\1\13"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\14\1\1\10\2\1\1\10\1\11\1\12\1\11"+
    "\1\0\1\13\1\3\1\0\1\14\2\4\1\15\1\16"+
    "\12\0\14\1\1\17\4\1\1\0\1\20\1\2\1\21"+
    "\1\22\14\0\4\1\1\17\13\1\11\0\1\17\2\0"+
    "\1\23\16\1\15\0\15\1\11\0\10\1\13\0\4\1"+
    "\14\0\2\1\13\0\2\1\10\0\1\1\5\0\1\1"+
    "\7\0\1\1\5\0\1\1\5\0\1\1\5\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\120\0\u0140\0\u0168\0\120\0\u0190\0\u01b8\0\u01e0\0\u0208"+
    "\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348"+
    "\0\120\0\u0370\0\u0398\0\u03c0\0\u03e8\0\120\0\u0410\0\u0438"+
    "\0\120\0\u0460\0\u0488\0\120\0\u04b0\0\u04d8\0\u0500\0\120"+
    "\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640"+
    "\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780"+
    "\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0"+
    "\0\u08e8\0\u0910\0\u0938\0\u0960\0\120\0\u0438\0\120\0\120"+
    "\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0"+
    "\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0"+
    "\0\170\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8"+
    "\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38"+
    "\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\120\0\u0f28\0\u0f50"+
    "\0\170\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068"+
    "\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8"+
    "\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8"+
    "\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428"+
    "\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568"+
    "\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8"+
    "\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8"+
    "\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68"+
    "\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8"+
    "\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8"+
    "\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\u1e28"+
    "\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40\0\u1f68"+
    "\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u2058\0\u2080\0\u20a8"+
    "\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170\0\u2198\0\u21c0\0\u21e8"+
    "\0\u2210\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8\0\u2300\0\u2328"+
    "\0\u2350\0\u2378\0\u23a0\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468"+
    "\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530\0\u2558\0\u2580\0\u25a8"+
    "\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698\0\u26c0\0\u26e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\1\4\1\16\1\17"+
    "\1\20\1\4\1\21\1\22\1\23\1\24\3\4\1\25"+
    "\1\26\1\27\3\4\1\30\3\4\1\31\1\32\1\33"+
    "\1\34\1\31\7\35\1\36\1\35\1\37\36\35\51\0"+
    "\2\4\11\0\27\4\7\0\1\5\7\0\1\40\35\0"+
    "\3\6\1\41\1\6\1\42\1\6\1\43\40\6\4\7"+
    "\1\44\1\45\1\7\1\46\40\7\6\0\1\10\51\0"+
    "\1\47\1\50\55\0\1\51\1\0\1\52\1\53\1\54"+
    "\1\55\1\56\1\0\1\57\1\60\2\0\1\61\1\0"+
    "\1\62\13\0\2\4\11\0\1\4\1\63\25\4\6\0"+
    "\2\4\11\0\11\4\1\64\1\65\14\4\6\0\2\4"+
    "\11\0\4\4\1\66\22\4\6\0\2\4\11\0\5\4"+
    "\1\67\21\4\6\0\2\4\11\0\1\4\1\70\10\4"+
    "\1\71\14\4\6\0\2\4\11\0\1\4\1\72\25\4"+
    "\6\0\2\4\11\0\5\4\1\73\1\74\20\4\6\0"+
    "\2\4\11\0\14\4\1\75\12\4\6\0\2\4\11\0"+
    "\3\4\1\76\2\4\1\76\20\4\6\0\2\4\11\0"+
    "\11\4\1\77\1\100\1\101\13\4\6\0\2\4\11\0"+
    "\12\4\1\102\14\4\6\0\2\4\11\0\1\4\1\103"+
    "\25\4\51\0\1\31\50\0\1\31\51\0\1\104\7\35"+
    "\1\0\1\35\1\0\36\35\10\0\1\105\41\0\1\106"+
    "\45\0\3\42\1\107\3\42\1\0\40\42\3\43\1\41"+
    "\1\43\1\0\42\43\7\46\1\0\44\46\1\110\1\45"+
    "\42\46\7\47\1\0\40\47\35\0\1\111\30\0\1\112"+
    "\13\0\1\113\43\0\1\114\46\0\1\115\44\0\1\116"+
    "\41\0\1\117\52\0\1\120\51\0\1\121\3\0\1\122"+
    "\50\0\1\123\36\0\1\124\33\0\2\4\11\0\2\4"+
    "\1\125\24\4\6\0\2\4\11\0\1\126\26\4\6\0"+
    "\2\4\11\0\12\4\1\127\14\4\6\0\2\4\11\0"+
    "\5\4\1\130\21\4\6\0\2\4\11\0\6\4\1\131"+
    "\20\4\6\0\2\4\11\0\1\132\26\4\6\0\2\4"+
    "\11\0\13\4\1\133\13\4\6\0\2\4\11\0\1\134"+
    "\26\4\6\0\2\4\11\0\16\4\1\125\10\4\6\0"+
    "\2\4\11\0\12\4\1\135\14\4\6\0\2\4\11\0"+
    "\15\4\1\136\11\4\6\0\2\4\11\0\11\4\1\137"+
    "\15\4\6\0\2\4\11\0\1\125\26\4\6\0\2\4"+
    "\11\0\2\4\1\140\24\4\6\0\2\4\11\0\6\4"+
    "\1\141\20\4\6\0\2\4\11\0\7\4\1\142\3\4"+
    "\1\143\13\4\6\0\2\4\11\0\5\4\1\144\21\4"+
    "\53\0\1\31\30\0\1\145\44\0\1\146\11\0\1\147"+
    "\35\0\1\150\56\0\1\151\32\0\1\152\57\0\1\153"+
    "\41\0\1\154\62\0\1\155\45\0\1\156\2\0\1\157"+
    "\27\0\1\157\65\0\1\113\47\0\1\160\16\0\2\4"+
    "\11\0\3\4\1\131\23\4\6\0\2\4\11\0\12\4"+
    "\1\161\14\4\6\0\2\4\11\0\6\4\1\162\20\4"+
    "\6\0\2\4\11\0\2\4\1\161\24\4\6\0\2\4"+
    "\11\0\14\4\1\163\2\4\1\164\7\4\6\0\2\4"+
    "\11\0\3\4\1\165\23\4\6\0\2\4\11\0\10\4"+
    "\1\166\16\4\6\0\2\4\11\0\5\4\1\167\21\4"+
    "\6\0\2\4\11\0\3\4\1\170\2\4\1\171\20\4"+
    "\6\0\2\4\11\0\1\172\26\4\6\0\2\4\11\0"+
    "\12\4\1\173\14\4\6\0\2\4\11\0\11\4\1\174"+
    "\15\4\6\0\2\4\11\0\12\4\1\175\14\4\6\0"+
    "\2\4\11\0\12\4\1\176\14\4\6\0\2\4\11\0"+
    "\17\4\1\177\7\4\33\0\1\200\37\0\1\201\2\0"+
    "\1\202\4\0\1\203\36\0\1\204\60\0\1\205\36\0"+
    "\1\206\61\0\1\207\41\0\1\210\54\0\1\211\40\0"+
    "\1\212\55\0\1\213\46\0\1\214\24\0\2\4\11\0"+
    "\22\4\1\215\4\4\6\0\2\4\11\0\1\4\1\216"+
    "\25\4\6\0\2\4\11\0\5\4\1\217\21\4\6\0"+
    "\2\4\11\0\6\4\1\220\20\4\6\0\2\4\11\0"+
    "\11\4\1\221\15\4\6\0\2\4\11\0\6\4\1\222"+
    "\20\4\6\0\2\4\11\0\6\4\1\223\20\4\6\0"+
    "\2\4\11\0\11\4\1\224\15\4\6\0\2\4\11\0"+
    "\13\4\1\161\13\4\6\0\2\4\11\0\10\4\1\225"+
    "\16\4\6\0\2\4\11\0\1\226\26\4\6\0\2\4"+
    "\11\0\10\4\1\227\16\4\6\0\2\4\11\0\1\230"+
    "\26\4\6\0\2\4\11\0\6\4\1\231\20\4\21\0"+
    "\1\232\60\0\1\233\44\0\1\234\47\0\1\207\41\0"+
    "\1\235\47\0\1\236\57\0\1\237\45\0\1\214\47\0"+
    "\1\240\47\0\1\241\57\0\1\156\45\0\1\235\40\0"+
    "\1\242\27\0\2\4\11\0\20\4\1\243\6\4\6\0"+
    "\2\4\11\0\2\4\1\244\24\4\6\0\2\4\11\0"+
    "\16\4\1\245\10\4\6\0\2\4\11\0\1\20\26\4"+
    "\6\0\2\4\11\0\3\4\1\246\23\4\6\0\2\4"+
    "\11\0\5\4\1\247\21\4\6\0\2\4\11\0\13\4"+
    "\1\20\13\4\6\0\2\4\11\0\14\4\1\250\12\4"+
    "\6\0\2\4\11\0\10\4\1\251\16\4\6\0\2\4"+
    "\11\0\22\4\1\161\4\4\6\0\2\4\11\0\13\4"+
    "\1\125\13\4\6\0\2\4\11\0\12\4\1\67\14\4"+
    "\6\0\2\4\11\0\5\4\1\252\21\4\33\0\1\253"+
    "\45\0\1\156\61\0\1\214\30\0\1\156\63\0\1\254"+
    "\42\0\1\156\41\0\1\255\1\256\1\257\1\0\1\260"+
    "\1\261\1\0\1\262\3\0\1\263\1\0\1\264\41\0"+
    "\1\265\42\0\1\156\26\0\2\4\11\0\14\4\1\266"+
    "\12\4\6\0\2\4\11\0\13\4\1\267\13\4\6\0"+
    "\2\4\11\0\14\4\1\161\12\4\6\0\2\4\11\0"+
    "\1\131\26\4\6\0\2\4\11\0\6\4\1\270\20\4"+
    "\6\0\2\4\11\0\11\4\1\67\15\4\6\0\2\4"+
    "\11\0\11\4\1\271\15\4\6\0\2\4\11\0\13\4"+
    "\1\126\13\4\27\0\1\272\53\0\1\273\46\0\1\274"+
    "\1\275\43\0\1\276\53\0\1\277\40\0\1\300\1\0"+
    "\1\301\56\0\1\302\45\0\1\303\47\0\1\304\40\0"+
    "\1\305\55\0\1\242\23\0\2\4\11\0\2\4\1\131"+
    "\24\4\6\0\2\4\11\0\17\4\1\164\7\4\6\0"+
    "\2\4\11\0\6\4\1\306\20\4\6\0\2\4\11\0"+
    "\3\4\1\307\23\4\36\0\1\310\32\0\1\311\66\0"+
    "\1\312\30\0\1\313\61\0\1\314\52\0\1\315\32\0"+
    "\1\316\73\0\1\314\30\0\1\317\62\0\1\320\45\0"+
    "\1\321\44\0\1\322\21\0\2\4\11\0\5\4\1\323"+
    "\21\4\6\0\2\4\11\0\1\324\26\4\24\0\1\325"+
    "\57\0\1\237\46\0\1\235\50\0\1\326\41\0\1\327"+
    "\50\0\1\330\54\0\1\331\56\0\1\332\40\0\1\235"+
    "\51\0\1\333\35\0\1\334\31\0\2\4\11\0\25\4"+
    "\1\335\1\4\6\0\2\4\11\0\5\4\1\131\21\4"+
    "\27\0\1\336\46\0\1\337\55\0\1\262\37\0\1\340"+
    "\52\0\1\341\53\0\1\334\37\0\1\342\45\0\1\156"+
    "\34\0\2\4\11\0\17\4\1\343\7\4\21\0\1\344"+
    "\10\0\1\345\1\346\35\0\1\347\66\0\1\350\33\0"+
    "\1\351\56\0\1\352\22\0\2\4\11\0\12\4\1\353"+
    "\14\4\24\0\1\354\63\0\1\156\43\0\1\355\41\0"+
    "\1\156\43\0\1\356\50\0\1\357\67\0\1\360\12\0"+
    "\2\4\11\0\16\4\1\361\10\4\35\0\1\362\44\0"+
    "\1\363\46\0\1\364\37\0\1\365\54\0\1\366\27\0"+
    "\2\4\11\0\17\4\1\367\7\4\42\0\1\370\51\0"+
    "\1\371\37\0\1\372\35\0\1\373\67\0\1\374\13\0"+
    "\2\4\11\0\12\4\1\375\14\4\27\0\1\237\42\0"+
    "\1\376\51\0\1\242\60\0\1\377\35\0\1\237\32\0"+
    "\2\4\11\0\5\4\1\u0100\21\4\33\0\1\u0101\47\0"+
    "\1\u0102\22\0\2\4\11\0\6\4\1\u0103\20\4\34\0"+
    "\1\347\42\0\1\u0104\26\0\2\4\11\0\10\4\1\u0105"+
    "\16\4\32\0\1\u0106\23\0\2\4\11\0\26\4\1\u0107"+
    "\31\0\1\235\24\0\2\4\11\0\11\4\1\u0108\15\4"+
    "\6\0\2\4\11\0\4\4\1\125\22\4\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\2\1\1\11\14\1\1\11"+
    "\4\1\1\11\1\1\1\0\1\11\1\1\1\0\1\11"+
    "\3\1\1\11\12\0\21\1\1\0\1\11\1\1\2\11"+
    "\14\0\20\1\11\0\1\11\2\0\17\1\15\0\15\1"+
    "\11\0\10\1\13\0\4\1\14\0\2\1\13\0\2\1"+
    "\10\0\1\1\5\0\1\1\7\0\1\1\5\0\1\1"+
    "\5\0\1\1\5\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   
   /**   
    * Constructor.  This must be here because JFlex does not generate a   
    * no-parameter constructor.   
    */   
   public ColoresFS() {  }
 
      
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addToken(int, int, int)   
    */   
   private void addHyperlinkToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, true);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    */   
   private void addToken(int tokenType) {   
      addToken(zzStartRead, zzMarkedPos-1, tokenType);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param tokenType The token's type.   
    * @see #addHyperlinkToken(int, int, int)   
    */   
   private void addToken(int start, int end, int tokenType) {   
      int so = start + offsetShift;   
      addToken(zzBuffer, start,end, tokenType, so, false);   
   }   
   
   /**   
    * Adds the token specified to the current linked list of tokens.   
    *   
    * @param array The character array.   
    * @param start The starting offset in the array.   
    * @param end The ending offset in the array.   
    * @param tokenType The token's type.   
    * @param startOffset The offset in the document at which this token   
    *        occurs.   
    * @param hyperlink Whether this token is a hyperlink.   
    */   
   public void addToken(char[] array, int start, int end, int tokenType,   
                  int startOffset, boolean hyperlink) {   
      super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
      zzStartRead = zzMarkedPos;   
   }   
   
   /**   
    * Returns the text to place at the beginning and end of a   
    * line to "comment" it in a this programming language.   
    *   
    * @return The start and end strings to add to a line to "comment"   
    *         it out.   
    */   
   public String[] getLineCommentStartAndEnd() {   
      return new String[] { "//", null };   
   }   
   
   /**   
    * Returns the first token in the linked list of tokens generated   
    * from <code>text</code>.  This method must be implemented by   
    * subclasses so they can correctly implement syntax highlighting.   
    *   
    * @param text The text from which to get tokens.   
    * @param initialTokenType The token type we should start with.   
    * @param startOffset The offset into the document at which   
    *        <code>text</code> starts.   
    * @return The first <code>Token</code> in a linked list representing   
    *         the syntax highlighted text.   
    */   
   public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
   
      resetTokenList();   
      this.offsetShift = -text.offset + startOffset;   
   
      // Start off in the proper state.   
      int state = Token.NULL;   
      switch (initialTokenType) {   
                  case Token.COMMENT_MULTILINE:   
            state = MLC;   
            start = text.offset;   
            break;   
   
         /* No documentation comments */   
         default:   
            state = Token.NULL;   
      }   
   
      s = text;   
      try {   
         yyreset(zzReader);   
         yybegin(state);   
         return yylex();   
      } catch (IOException ioe) {   
         ioe.printStackTrace();   
         return new TokenImpl();   
      }   
   
   }   
   
   /**   
    * Refills the input buffer.   
    *   
    * @return      <code>true</code> if EOF was reached, otherwise   
    *              <code>false</code>.   
    */   
   private boolean zzRefill() {   
//este se queda
      return zzCurrentPos>=s.offset+s.count;   
   }   
   

   
   /**   
    * Resets the scanner to read from a new input stream.   
    * Does not close the old reader.   
    *   
    * All internal variables are reset, the old input stream    
    * <b>cannot</b> be reused (internal buffer is discarded and lost).   
    * Lexical state is set to <tt>YY_INITIAL</tt>.   
    *   
    * @param reader   the new input stream    
    */   
   public final void yyreset(Reader reader) {  



//este se queda 
      // 's' has been updated.   
      zzBuffer = s.array;   
      /*   
       * We replaced the line below with the two below it because zzRefill   
       * no longer "refills" the buffer (since the way we do it, it's always   
       * "full" the first time through, since it points to the segment's   
       * array).  So, we assign zzEndRead here.   
       */   
      //zzStartRead = zzEndRead = s.offset;   
      zzStartRead = s.offset;   
      zzEndRead = zzStartRead + s.count - 1;   
      zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
      zzLexicalState = YYINITIAL;   
      zzReader = reader;   
      zzAtBOL  = true;   
      zzAtEOF  = false;   
   }   
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ColoresFS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ColoresFS(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */

  
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */

  
  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { addNullToken(); return firstToken;
          }
        case 20: break;
        case 11: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 21: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 22: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 23: break;
        case 18: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 24: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 25: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 27: break;
        case 19: 
          { addToken(Token.FUNCTION);
          }
        case 28: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 29: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 16: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 31: break;
        case 17: 
          { addToken(Token.ERROR_CHAR);
          }
        case 32: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 33: break;
        case 13: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 34: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 35: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 36: break;
        case 9: 
          { 
          }
        case 37: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 265: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 266: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
